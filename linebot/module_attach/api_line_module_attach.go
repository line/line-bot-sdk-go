/**
 * LINE Messaging API
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

//go:generate python3 ../../generate-code.py

package module_attach

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"

	"github.com/line/line-bot-sdk-go/v8/linebot"
)

type LineModuleAttachAPI struct {
	httpClient   *http.Client
	endpoint     *url.URL
	channelToken string
	ctx          context.Context
}

// LineModuleAttachAPIOption type
type LineModuleAttachAPIOption func(*LineModuleAttachAPI) error

// New returns a new bot client instance.
func NewLineModuleAttachAPI(channelToken string, options ...LineModuleAttachAPIOption) (*LineModuleAttachAPI, error) {
	if channelToken == "" {
		return nil, errors.New("missing channel access token")
	}

	c := &LineModuleAttachAPI{
		channelToken: channelToken,
		httpClient:   http.DefaultClient,
	}

	u, err := url.ParseRequestURI("https://api.line.me")
	if err != nil {
		return nil, err
	}
	c.endpoint = u

	for _, option := range options {
		err := option(c)
		if err != nil {
			return nil, err
		}
	}
	return c, nil
}

// WithContext method
func (call *LineModuleAttachAPI) WithContext(ctx context.Context) *LineModuleAttachAPI {
	call.ctx = ctx
	return call
}

func (client *LineModuleAttachAPI) Do(req *http.Request) (*http.Response, error) {
	if client.channelToken != "" {
		req.Header.Set("Authorization", "Bearer "+client.channelToken)
	}
	req.Header.Set("User-Agent", "LINE-BotSDK-Go/"+linebot.GetVersion())
	if client.ctx != nil {
		req = req.WithContext(client.ctx)
	}
	return client.httpClient.Do(req)
}

func (client *LineModuleAttachAPI) Url(endpointPath string) string {
	newPath := path.Join(client.endpoint.Path, endpointPath)
	u := *client.endpoint
	u.Path = newPath
	return u.String()
}

// WithHTTPClient function
func WithHTTPClient(c *http.Client) LineModuleAttachAPIOption {
	return func(client *LineModuleAttachAPI) error {
		client.httpClient = c
		return nil
	}
}

// WithEndpointClient function
func WithEndpoint(endpoint string) LineModuleAttachAPIOption {
	return func(client *LineModuleAttachAPI) error {
		u, err := url.ParseRequestURI(endpoint)
		if err != nil {
			return err
		}
		client.endpoint = u
		return nil
	}
}

// AttachModule
//
// Attach by operation of the module channel provider
// Parameters:
//        grantType             authorization_code
//        code             Authorization code received from the LINE Platform.
//        redirectUri             Specify the redirect_uri specified in the URL for authentication and authorization.
//        codeVerifier             Specify when using PKCE (Proof Key for Code Exchange) defined in the OAuth 2.0 extension specification as a countermeasure against authorization code interception attacks.
//        clientId             Instead of using Authorization header, you can use this parameter to specify the channel ID of the module channel. You can find the channel ID of the module channel in the LINE Developers Console.
//        clientSecret             Instead of using Authorization header, you can use this parameter to specify the channel secret of the module channel. You can find the channel secret of the module channel in the LINE Developers Console.
//        region             If you specified a value for region in the URL for authentication and authorization, specify the same value.
//        basicSearchId             If you specified a value for basic_search_id in the URL for authentication and authorization, specify the same value.
//        scope             If you specified a value for scope in the URL for authentication and authorization, specify the same value.
//        brandType             If you specified a value for brand_type in the URL for authentication and authorization, specify the same value.

// https://developers.line.biz/en/reference/partner-docs/#link-attach-by-operation-module-channel-provider
func (client *LineModuleAttachAPI) AttachModule(

	grantType string,

	code string,

	redirectUri string,

	codeVerifier string,

	clientId string,

	clientSecret string,

	region string,

	basicSearchId string,

	scope string,

	brandType string,

) (*AttachModuleResponse, error) {
	_, body, error := client.AttachModuleWithHttpInfo(

		grantType,

		code,

		redirectUri,

		codeVerifier,

		clientId,

		clientSecret,

		region,

		basicSearchId,

		scope,

		brandType,
	)
	return body, error
}

// AttachModule
// If you want to take advantage of the HTTPResponse object for status codes and headers, use this signature.
//
// Attach by operation of the module channel provider
// Parameters:
//        grantType             authorization_code
//        code             Authorization code received from the LINE Platform.
//        redirectUri             Specify the redirect_uri specified in the URL for authentication and authorization.
//        codeVerifier             Specify when using PKCE (Proof Key for Code Exchange) defined in the OAuth 2.0 extension specification as a countermeasure against authorization code interception attacks.
//        clientId             Instead of using Authorization header, you can use this parameter to specify the channel ID of the module channel. You can find the channel ID of the module channel in the LINE Developers Console.
//        clientSecret             Instead of using Authorization header, you can use this parameter to specify the channel secret of the module channel. You can find the channel secret of the module channel in the LINE Developers Console.
//        region             If you specified a value for region in the URL for authentication and authorization, specify the same value.
//        basicSearchId             If you specified a value for basic_search_id in the URL for authentication and authorization, specify the same value.
//        scope             If you specified a value for scope in the URL for authentication and authorization, specify the same value.
//        brandType             If you specified a value for brand_type in the URL for authentication and authorization, specify the same value.

// https://developers.line.biz/en/reference/partner-docs/#link-attach-by-operation-module-channel-provider
func (client *LineModuleAttachAPI) AttachModuleWithHttpInfo(

	grantType string,

	code string,

	redirectUri string,

	codeVerifier string,

	clientId string,

	clientSecret string,

	region string,

	basicSearchId string,

	scope string,

	brandType string,

) (*http.Response, *AttachModuleResponse, error) {
	path := "/module/auth/v1/token"

	vs := url.Values{
		"grant_type":      []string{string(grantType)},
		"code":            []string{string(code)},
		"redirect_uri":    []string{string(redirectUri)},
		"code_verifier":   []string{string(codeVerifier)},
		"client_id":       []string{string(clientId)},
		"client_secret":   []string{string(clientSecret)},
		"region":          []string{string(region)},
		"basic_search_id": []string{string(basicSearchId)},
		"scope":           []string{string(scope)},
		"brand_type":      []string{string(brandType)},
	}
	buf := vs.Encode()
	body := bytes.NewBufferString(buf)

	req, err := http.NewRequest(http.MethodPost, client.Url(path), body)
	if err != nil {
		return nil, nil, err
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	res, err := client.Do(req)

	if err != nil {
		return res, nil, err
	}

	if res.StatusCode/100 != 2 {
		bodyBytes, err := io.ReadAll(res.Body)
		bodyReader := bytes.NewReader(bodyBytes)
		if err != nil {
			return res, nil, fmt.Errorf("failed to read response body: %w", err)
		}
		res.Body = io.NopCloser(bodyReader)
		return res, nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(bodyBytes))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := AttachModuleResponse{}
	if err := decoder.Decode(&result); err != nil {
		return res, nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return res, &result, nil

}
