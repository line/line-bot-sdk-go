/**
 * LINE Messaging API
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

//go:generate python3 ../../generate-code.py
package messaging_api

import (
	"encoding/json"
	"fmt"
)

// RichMenuBatchRequest
// RichMenuBatchRequest

type RichMenuBatchRequest struct {

	/**
	 * Array of Rich menu operation object... (Required)
	 */
	Operations []RichMenuBatchOperationInterface `json:"operations"`

	/**
	 * Key for retry. Key value is a string matching the regular expression pattern
	 */
	ResumeRequestKey string `json:"resumeRequestKey,omitempty"`
}

func (cr *RichMenuBatchRequest) UnmarshalJSON(data []byte) error {
	var raw map[string]json.RawMessage
	err := json.Unmarshal(data, &raw)
	if err != nil {
		return fmt.Errorf("JSON parse error in map: %w", err)
	}

	if raw["operations"] != nil {

		var rawoperations []json.RawMessage
		err = json.Unmarshal(raw["operations"], &rawoperations)
		if err != nil {
			return fmt.Errorf("JSON parse error in operations(array): %w", err)
		}

		for _, data := range rawoperations {
			e, err := UnmarshalRichMenuBatchOperation(data)
			if err != nil {
				return fmt.Errorf("JSON parse error in RichMenuBatchOperation(discriminator array): %w", err)
			}
			cr.Operations = append(cr.Operations, e)
		}

	}

	if raw["resumeRequestKey"] != nil {

		err = json.Unmarshal(raw["resumeRequestKey"], &cr.ResumeRequestKey)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(ResumeRequestKey): %w", err)
		}

	}

	return nil
}

// MarshalJSON customizes the JSON serialization of the RichMenuBatchRequest struct.
func (r *RichMenuBatchRequest) MarshalJSON() ([]byte, error) {

	newOperations := make([]RichMenuBatchOperationInterface, len(r.Operations))
	for i, v := range r.Operations {
		newOperations[i] = setDiscriminatorPropertyRichMenuBatchOperation(v)
	}

	type Alias RichMenuBatchRequest
	return json.Marshal(&struct {
		*Alias

		Operations []RichMenuBatchOperationInterface `json:"operations"`
	}{
		Alias: (*Alias)(r),

		Operations: newOperations,
	})
}
