/**
 * LINE Messaging API
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

//go:generate python3 ../../generate-code.py
package messaging_api

import (
	"encoding/json"
	"fmt"
)

type CouponRewardResponseInterface interface {
	GetType() string
}

func (e CouponRewardResponse) GetType() string {
	return e.Type
}

type UnknownCouponRewardResponse struct {
	CouponRewardResponseInterface
	Type string
	Raw  map[string]json.RawMessage
}

func (e UnknownCouponRewardResponse) GetType() string {
	return e.Type
}

func setDiscriminatorPropertyCouponRewardResponse(r CouponRewardResponseInterface) CouponRewardResponseInterface {
	switch v := r.(type) {
	case *CouponCashBackRewardResponse:
		if v.Type == "" {
			v.Type = "cashBack"
		}
		return v
	case CouponCashBackRewardResponse:
		if v.Type == "" {
			v.Type = "cashBack"
		}
		return v
	case *CouponDiscountRewardResponse:
		if v.Type == "" {
			v.Type = "discount"
		}
		return v
	case CouponDiscountRewardResponse:
		if v.Type == "" {
			v.Type = "discount"
		}
		return v
	case *CouponFreeRewardResponse:
		if v.Type == "" {
			v.Type = "free"
		}
		return v
	case CouponFreeRewardResponse:
		if v.Type == "" {
			v.Type = "free"
		}
		return v
	case *CouponGiftRewardResponse:
		if v.Type == "" {
			v.Type = "gift"
		}
		return v
	case CouponGiftRewardResponse:
		if v.Type == "" {
			v.Type = "gift"
		}
		return v
	case *CouponOthersRewardResponse:
		if v.Type == "" {
			v.Type = "others"
		}
		return v
	case CouponOthersRewardResponse:
		if v.Type == "" {
			v.Type = "others"
		}
		return v

	default:
		return v
	}
}

// CouponRewardResponse

type CouponRewardResponse struct {
	// Type of coupon. Determines the benefit provided.

	Type string `json:"type"`
}

func UnmarshalCouponRewardResponse(data []byte) (CouponRewardResponseInterface, error) {
	var raw map[string]json.RawMessage
	err := json.Unmarshal(data, &raw)
	if err != nil {
		return nil, fmt.Errorf("UnmarshalCouponRewardResponse: %w", err)
	}

	var discriminator string
	err = json.Unmarshal(raw["type"], &discriminator)
	if err != nil {
		return nil, fmt.Errorf("UnmarshalCouponRewardResponse: Cannot read type: %w", err)
	}

	switch discriminator {
	case "cashBack":
		var cashBack CouponCashBackRewardResponse
		if err := json.Unmarshal(data, &cashBack); err != nil {
			return nil, fmt.Errorf("UnmarshalCouponRewardResponse: Cannot read cashBack: %w", err)
		}
		return cashBack, nil
	case "discount":
		var discount CouponDiscountRewardResponse
		if err := json.Unmarshal(data, &discount); err != nil {
			return nil, fmt.Errorf("UnmarshalCouponRewardResponse: Cannot read discount: %w", err)
		}
		return discount, nil
	case "free":
		var free CouponFreeRewardResponse
		if err := json.Unmarshal(data, &free); err != nil {
			return nil, fmt.Errorf("UnmarshalCouponRewardResponse: Cannot read free: %w", err)
		}
		return free, nil
	case "gift":
		var gift CouponGiftRewardResponse
		if err := json.Unmarshal(data, &gift); err != nil {
			return nil, fmt.Errorf("UnmarshalCouponRewardResponse: Cannot read gift: %w", err)
		}
		return gift, nil
	case "others":
		var others CouponOthersRewardResponse
		if err := json.Unmarshal(data, &others); err != nil {
			return nil, fmt.Errorf("UnmarshalCouponRewardResponse: Cannot read others: %w", err)
		}
		return others, nil

	default:
		var unknown UnknownCouponRewardResponse
		unknown.Type = discriminator
		unknown.Raw = raw
		return unknown, nil
	}
}
