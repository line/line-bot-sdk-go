/**
 * LINE Messaging API
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

//go:generate python3 ../../generate-code.py

package messaging_api

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"log"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/line/line-bot-sdk-go/v7/linebot"
)

type MessagingApiAPI struct {
	httpClient   *http.Client
	endpoint     *url.URL
	channelToken string
	ctx          context.Context
}

// MessagingApiAPIOption type
type MessagingApiAPIOption func(*MessagingApiAPI) error

// New returns a new bot client instance.
func NewMessagingApiAPI(channelToken string, options ...MessagingApiAPIOption) (*MessagingApiAPI, error) {
	if channelToken == "" {
		return nil, errors.New("missing channel access token")
	}

	c := &MessagingApiAPI{
		channelToken: channelToken,
		httpClient:   http.DefaultClient,
	}

	u, err := url.ParseRequestURI("https://api.line.me")
	if err != nil {
		return nil, err
	}
	c.endpoint = u

	for _, option := range options {
		err := option(c)
		if err != nil {
			return nil, err
		}
	}
	return c, nil
}

// WithContext method
func (call *MessagingApiAPI) WithContext(ctx context.Context) *MessagingApiAPI {
	call.ctx = ctx
	return call
}

func (client *MessagingApiAPI) Do(req *http.Request) (*http.Response, error) {
	if client.channelToken != "" {
		req.Header.Set("Authorization", "Bearer "+client.channelToken)
	}
	req.Header.Set("User-Agent", "LINE-BotSDK-Go/"+linebot.GetVersion())
	if client.ctx != nil {
		req = req.WithContext(client.ctx)
	}
	return client.httpClient.Do(req)
}

func (client *MessagingApiAPI) Url(endpointPath string) string {
	u := client.endpoint
	u.Path = path.Join(u.Path, endpointPath)
	return u.String()
}

// WithHTTPClient function
func WithHTTPClient(c *http.Client) MessagingApiAPIOption {
	return func(client *MessagingApiAPI) error {
		client.httpClient = c
		return nil
	}
}

// WithEndpointClient function
func WithEndpoint(endpoint string) MessagingApiAPIOption {
	return func(client *MessagingApiAPI) error {
		u, err := url.ParseRequestURI(endpoint)
		if err != nil {
			return err
		}
		client.endpoint = u
		return nil
	}
}

// AudienceMatch
//
// Send a message using phone number
// Parameters:
//        audienceMatchMessagesRequest

// https://developers.line.biz/en/reference/partner-docs/#phone-audience-match
func (client *MessagingApiAPI) AudienceMatch(

	audienceMatchMessagesRequest *AudienceMatchMessagesRequest,

) (struct{}, error) {
	path := "/bot/ad/multicast/phone"

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	if err := enc.Encode(audienceMatchMessagesRequest); err != nil {
		return struct{}{}, err
	}
	log.Printf("Sending request: method=Post path=%s body=%s\n", path, buf.String())
	req, err := http.NewRequest(http.MethodPost, client.Url(path), &buf)
	if err != nil {
		return struct{}{}, err
	}
	req.Header.Set("Content-Type", "application/json; charset=UTF-8")

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return struct{}{}, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return struct{}{}, fmt.Errorf("failed to read response body: %w", err)
		}
		return struct{}{}, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	return struct{}{}, nil

}

// Broadcast
//
// Sends a message to multiple users at any time.
// Parameters:
//        broadcastRequest
//        xLineRetryKey             Retry key. Specifies the UUID in hexadecimal format (e.g., `123e4567-e89b-12d3-a456-426614174000`) generated by any method. The retry key isn't generated by LINE. Each developer must generate their own retry key.

// https://developers.line.biz/en/reference/messaging-api/#send-broadcast-message
func (client *MessagingApiAPI) Broadcast(

	broadcastRequest *BroadcastRequest,

	xLineRetryKey string,

) (*map[string]interface{}, error) {
	path := "/v2/bot/message/broadcast"

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	if err := enc.Encode(broadcastRequest); err != nil {
		return nil, err
	}
	log.Printf("Sending request: method=Post path=%s body=%s\n", path, buf.String())
	req, err := http.NewRequest(http.MethodPost, client.Url(path), &buf)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json; charset=UTF-8")

	req.Header.Set("X-Line-Retry-Key", string(xLineRetryKey))

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := map[string]interface{}{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// CancelDefaultRichMenu
//
// Cancel default rich menu
// Parameters:

// https://developers.line.biz/en/reference/messaging-api/#cancel-default-rich-menu
func (client *MessagingApiAPI) CancelDefaultRichMenu() (struct{}, error) {
	path := "/v2/bot/user/all/richmenu"

	log.Printf("Sending request: method=Delete path=%s\n", path)
	req, err := http.NewRequest(http.MethodDelete, client.Url(path), nil)
	if err != nil {
		return struct{}{}, err
	}

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return struct{}{}, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return struct{}{}, fmt.Errorf("failed to read response body: %w", err)
		}
		return struct{}{}, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	return struct{}{}, nil

}

// CreateRichMenu
//
// Create rich menu
// Parameters:
//        richMenuRequest

// https://developers.line.biz/en/reference/messaging-api/#create-rich-menu
func (client *MessagingApiAPI) CreateRichMenu(

	richMenuRequest *RichMenuRequest,

) (*RichMenuIdResponse, error) {
	path := "/v2/bot/richmenu"

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	if err := enc.Encode(richMenuRequest); err != nil {
		return nil, err
	}
	log.Printf("Sending request: method=Post path=%s body=%s\n", path, buf.String())
	req, err := http.NewRequest(http.MethodPost, client.Url(path), &buf)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json; charset=UTF-8")

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := RichMenuIdResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// CreateRichMenuAlias
//
// Create rich menu alias
// Parameters:
//        createRichMenuAliasRequest

// https://developers.line.biz/en/reference/messaging-api/#create-rich-menu-alias
func (client *MessagingApiAPI) CreateRichMenuAlias(

	createRichMenuAliasRequest *CreateRichMenuAliasRequest,

) (struct{}, error) {
	path := "/v2/bot/richmenu/alias"

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	if err := enc.Encode(createRichMenuAliasRequest); err != nil {
		return struct{}{}, err
	}
	log.Printf("Sending request: method=Post path=%s body=%s\n", path, buf.String())
	req, err := http.NewRequest(http.MethodPost, client.Url(path), &buf)
	if err != nil {
		return struct{}{}, err
	}
	req.Header.Set("Content-Type", "application/json; charset=UTF-8")

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return struct{}{}, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return struct{}{}, fmt.Errorf("failed to read response body: %w", err)
		}
		return struct{}{}, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	return struct{}{}, nil

}

// DeleteRichMenu
//
// Deletes a rich menu.
// Parameters:
//        richMenuId             ID of a rich menu

// https://developers.line.biz/en/reference/messaging-api/#delete-rich-menu
func (client *MessagingApiAPI) DeleteRichMenu(

	richMenuId string,

) (struct{}, error) {
	path := "/v2/bot/richmenu/{richMenuId}"

	path = strings.Replace(path, "{richMenuId}", richMenuId, -1)

	log.Printf("Sending request: method=Delete path=%s\n", path)
	req, err := http.NewRequest(http.MethodDelete, client.Url(path), nil)
	if err != nil {
		return struct{}{}, err
	}

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return struct{}{}, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return struct{}{}, fmt.Errorf("failed to read response body: %w", err)
		}
		return struct{}{}, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	return struct{}{}, nil

}

// DeleteRichMenuAlias
//
// Delete rich menu alias
// Parameters:
//        richMenuAliasId             Rich menu alias ID that you want to delete.

// https://developers.line.biz/en/reference/messaging-api/#delete-rich-menu-alias
func (client *MessagingApiAPI) DeleteRichMenuAlias(

	richMenuAliasId string,

) (struct{}, error) {
	path := "/v2/bot/richmenu/alias/{richMenuAliasId}"

	path = strings.Replace(path, "{richMenuAliasId}", richMenuAliasId, -1)

	log.Printf("Sending request: method=Delete path=%s\n", path)
	req, err := http.NewRequest(http.MethodDelete, client.Url(path), nil)
	if err != nil {
		return struct{}{}, err
	}

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return struct{}{}, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return struct{}{}, fmt.Errorf("failed to read response body: %w", err)
		}
		return struct{}{}, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	return struct{}{}, nil

}

// GetAdPhoneMessageStatistics
//
// Get result of message delivery using phone number
// Parameters:
//        date             Date the message was sent  Format: `yyyyMMdd` (e.g. `20190831`) Time Zone: UTC+9

// https://developers.line.biz/en/reference/partner-docs/#get-phone-audience-match
func (client *MessagingApiAPI) GetAdPhoneMessageStatistics(

	date string,

) (*NumberOfMessagesResponse, error) {
	path := "/v2/bot/message/delivery/ad_phone"

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	var query url.Values
	query = url.Values{"date": []string{string(date)}}

	req.URL.RawQuery = query.Encode()

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := NumberOfMessagesResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// GetAggregationUnitNameList
//
// Get name list of units used this month
// Parameters:
//        limit             The maximum number of aggregation units you can get per request.
//        start             Value of the continuation token found in the next property of the JSON object returned in the response. If you can't get all the aggregation units in one request, include this parameter to get the remaining array.

// https://developers.line.biz/en/reference/messaging-api/#get-name-list-of-units-used-this-month
func (client *MessagingApiAPI) GetAggregationUnitNameList(

	limit string,

	start string,

) (*GetAggregationUnitNameListResponse, error) {
	path := "/v2/bot/message/aggregation/list"

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	var query url.Values
	query = url.Values{"limit": []string{string(limit)}}
	query = url.Values{"start": []string{string(start)}}

	req.URL.RawQuery = query.Encode()

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := GetAggregationUnitNameListResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// GetAggregationUnitUsage
//
// Get number of units used this month
// Parameters:

// https://developers.line.biz/en/reference/messaging-api/#get-number-of-units-used-this-month
func (client *MessagingApiAPI) GetAggregationUnitUsage() (*GetAggregationUnitUsageResponse, error) {
	path := "/v2/bot/message/aggregation/info"

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := GetAggregationUnitUsageResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// GetBotInfo
//
// Get bot info
// Parameters:

// https://developers.line.biz/en/reference/messaging-api/#get-bot-info
func (client *MessagingApiAPI) GetBotInfo() (*BotInfoResponse, error) {
	path := "/v2/bot/info"

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := BotInfoResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// GetDefaultRichMenuId
//
// Gets the ID of the default rich menu set with the Messaging API.
// Parameters:

// https://developers.line.biz/en/reference/messaging-api/#get-default-rich-menu-id
func (client *MessagingApiAPI) GetDefaultRichMenuId() (*RichMenuIdResponse, error) {
	path := "/v2/bot/user/all/richmenu"

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := RichMenuIdResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// GetFollowers
//
// Get a list of users who added your LINE Official Account as a friend
// Parameters:
//        start             Value of the continuation token found in the next property of the JSON object returned in the response. Include this parameter to get the next array of user IDs.
//        limit             The maximum number of user IDs to retrieve in a single request.

// https://developers.line.biz/en/reference/messaging-api/#get-follower-ids
func (client *MessagingApiAPI) GetFollowers(

	start string,

	limit int32,

) (*GetFollowersResponse, error) {
	path := "/v2/bot/followers/ids"

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	var query url.Values
	query = url.Values{"start": []string{string(start)}}
	query = url.Values{"limit": []string{string(limit)}}

	req.URL.RawQuery = query.Encode()

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := GetFollowersResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// GetGroupMemberCount
//
// Get number of users in a group chat
// Parameters:
//        groupId             Group ID

// https://developers.line.biz/en/reference/messaging-api/#get-members-group-count
func (client *MessagingApiAPI) GetGroupMemberCount(

	groupId string,

) (*GroupMemberCountResponse, error) {
	path := "/v2/bot/group/{groupId}/members/count"

	path = strings.Replace(path, "{groupId}", groupId, -1)

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := GroupMemberCountResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// GetGroupMemberProfile
//
// Get group chat member profile
// Parameters:
//        groupId             Group ID
//        userId             User ID

// https://developers.line.biz/en/reference/messaging-api/#get-group-member-profile
func (client *MessagingApiAPI) GetGroupMemberProfile(

	groupId string,

	userId string,

) (*GroupUserProfileResponse, error) {
	path := "/v2/bot/group/{groupId}/member/{userId}"

	path = strings.Replace(path, "{groupId}", groupId, -1)

	path = strings.Replace(path, "{userId}", userId, -1)

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := GroupUserProfileResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// GetGroupMembersIds
//
// Get group chat member user IDs
// Parameters:
//        groupId             Group ID
//        start             Value of the continuation token found in the `next` property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group.

// https://developers.line.biz/en/reference/messaging-api/#get-group-member-user-ids
func (client *MessagingApiAPI) GetGroupMembersIds(

	groupId string,

	start string,

) (*MembersIdsResponse, error) {
	path := "/v2/bot/group/{groupId}/members/ids"

	path = strings.Replace(path, "{groupId}", groupId, -1)

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	var query url.Values
	query = url.Values{"start": []string{string(start)}}

	req.URL.RawQuery = query.Encode()

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := MembersIdsResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// GetGroupSummary
//
// Get group chat summary
// Parameters:
//        groupId             Group ID

// https://developers.line.biz/en/reference/messaging-api/#get-group-summary
func (client *MessagingApiAPI) GetGroupSummary(

	groupId string,

) (*GroupSummaryResponse, error) {
	path := "/v2/bot/group/{groupId}/summary"

	path = strings.Replace(path, "{groupId}", groupId, -1)

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := GroupSummaryResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// GetMessageQuota
//
// Gets the target limit for sending messages in the current month. The total number of the free messages and the additional messages is returned.
// Parameters:

// https://developers.line.biz/en/reference/messaging-api/#get-quota
func (client *MessagingApiAPI) GetMessageQuota() (*MessageQuotaResponse, error) {
	path := "/v2/bot/message/quota"

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := MessageQuotaResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// GetMessageQuotaConsumption
//
// Gets the number of messages sent in the current month.
// Parameters:

// https://developers.line.biz/en/reference/messaging-api/#get-consumption
func (client *MessagingApiAPI) GetMessageQuotaConsumption() (*QuotaConsumptionResponse, error) {
	path := "/v2/bot/message/quota/consumption"

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := QuotaConsumptionResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// GetNarrowcastProgress
//
// Gets the status of a narrowcast message.
// Parameters:
//        requestId             The narrowcast message's request ID. Each Messaging API request has a request ID.

// https://developers.line.biz/en/reference/messaging-api/#get-narrowcast-progress-status
func (client *MessagingApiAPI) GetNarrowcastProgress(

	requestId string,

) (*NarrowcastProgressResponse, error) {
	path := "/v2/bot/message/progress/narrowcast"

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	var query url.Values
	query = url.Values{"requestId": []string{string(requestId)}}

	req.URL.RawQuery = query.Encode()

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := NarrowcastProgressResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// GetNumberOfSentBroadcastMessages
//
// Get number of sent broadcast messages
// Parameters:
//        date             Date the messages were sent  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9

// https://developers.line.biz/en/reference/messaging-api/#get-number-of-broadcast-messages
func (client *MessagingApiAPI) GetNumberOfSentBroadcastMessages(

	date string,

) (*NumberOfMessagesResponse, error) {
	path := "/v2/bot/message/delivery/broadcast"

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	var query url.Values
	query = url.Values{"date": []string{string(date)}}

	req.URL.RawQuery = query.Encode()

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := NumberOfMessagesResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// GetNumberOfSentMulticastMessages
//
// Get number of sent multicast messages
// Parameters:
//        date             Date the messages were sent  Format: `yyyyMMdd` (e.g. `20191231`) Timezone: UTC+9

// https://developers.line.biz/en/reference/messaging-api/#get-number-of-multicast-messages
func (client *MessagingApiAPI) GetNumberOfSentMulticastMessages(

	date string,

) (*NumberOfMessagesResponse, error) {
	path := "/v2/bot/message/delivery/multicast"

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	var query url.Values
	query = url.Values{"date": []string{string(date)}}

	req.URL.RawQuery = query.Encode()

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := NumberOfMessagesResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// GetNumberOfSentPushMessages
//
// Get number of sent push messages
// Parameters:
//        date             Date the messages were sent  Format: `yyyyMMdd` (e.g. `20191231`) Timezone: UTC+9

// https://developers.line.biz/en/reference/messaging-api/#get-number-of-push-messages
func (client *MessagingApiAPI) GetNumberOfSentPushMessages(

	date string,

) (*NumberOfMessagesResponse, error) {
	path := "/v2/bot/message/delivery/push"

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	var query url.Values
	query = url.Values{"date": []string{string(date)}}

	req.URL.RawQuery = query.Encode()

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := NumberOfMessagesResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// GetNumberOfSentReplyMessages
//
// Get number of sent reply messages
// Parameters:
//        date             Date the messages were sent  Format: `yyyyMMdd` (e.g. `20191231`) Timezone: UTC+9

// https://developers.line.biz/en/reference/messaging-api/#get-number-of-reply-messages
func (client *MessagingApiAPI) GetNumberOfSentReplyMessages(

	date string,

) (*NumberOfMessagesResponse, error) {
	path := "/v2/bot/message/delivery/reply"

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	var query url.Values
	query = url.Values{"date": []string{string(date)}}

	req.URL.RawQuery = query.Encode()

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := NumberOfMessagesResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// GetPNPMessageStatistics
//
// Get number of sent LINE notification messages
// Parameters:
//        date             Date the message was sent  Format: `yyyyMMdd` (Example:`20211231`) Time zone: UTC+9

// https://developers.line.biz/en/reference/partner-docs/#get-number-of-sent-line-notification-messages
func (client *MessagingApiAPI) GetPNPMessageStatistics(

	date string,

) (*NumberOfMessagesResponse, error) {
	path := "/v2/bot/message/delivery/pnp"

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	var query url.Values
	query = url.Values{"date": []string{string(date)}}

	req.URL.RawQuery = query.Encode()

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := NumberOfMessagesResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// GetProfile
//
// Get profile
// Parameters:
//        userId             User ID

// https://developers.line.biz/en/reference/messaging-api/#get-profile
func (client *MessagingApiAPI) GetProfile(

	userId string,

) (*UserProfileResponse, error) {
	path := "/v2/bot/profile/{userId}"

	path = strings.Replace(path, "{userId}", userId, -1)

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := UserProfileResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// GetRichMenu
//
// Gets a rich menu via a rich menu ID.
// Parameters:
//        richMenuId             ID of a rich menu

// https://developers.line.biz/en/reference/messaging-api/#get-rich-menu
func (client *MessagingApiAPI) GetRichMenu(

	richMenuId string,

) (*RichMenuResponse, error) {
	path := "/v2/bot/richmenu/{richMenuId}"

	path = strings.Replace(path, "{richMenuId}", richMenuId, -1)

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := RichMenuResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// GetRichMenuAlias
//
// Get rich menu alias information
// Parameters:
//        richMenuAliasId             The rich menu alias ID whose information you want to obtain.

// https://developers.line.biz/en/reference/messaging-api/#get-rich-menu-alias-by-id
func (client *MessagingApiAPI) GetRichMenuAlias(

	richMenuAliasId string,

) (*RichMenuAliasResponse, error) {
	path := "/v2/bot/richmenu/alias/{richMenuAliasId}"

	path = strings.Replace(path, "{richMenuAliasId}", richMenuAliasId, -1)

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := RichMenuAliasResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// GetRichMenuAliasList
//
// Get list of rich menu alias
// Parameters:

// https://developers.line.biz/en/reference/messaging-api/#get-rich-menu-alias-list
func (client *MessagingApiAPI) GetRichMenuAliasList() (*RichMenuAliasListResponse, error) {
	path := "/v2/bot/richmenu/alias/list"

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := RichMenuAliasListResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// GetRichMenuBatchProgress
//
// Get the status of Replace or unlink a linked rich menus in batches.
// Parameters:
//        requestId             A request ID used to batch control the rich menu linked to the user. Each Messaging API request has a request ID.

// https://developers.line.biz/en/reference/messaging-api/#get-batch-control-rich-menus-progress-status
func (client *MessagingApiAPI) GetRichMenuBatchProgress(

	requestId string,

) (*RichMenuBatchProgressResponse, error) {
	path := "/v2/bot/richmenu/progress/batch"

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	var query url.Values
	query = url.Values{"requestId": []string{string(requestId)}}

	req.URL.RawQuery = query.Encode()

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := RichMenuBatchProgressResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// GetRichMenuIdOfUser
//
// Get rich menu ID of user
// Parameters:
//        userId             User ID. Found in the `source` object of webhook event objects. Do not use the LINE ID used in LINE.

// https://developers.line.biz/en/reference/messaging-api/#get-rich-menu-id-of-user
func (client *MessagingApiAPI) GetRichMenuIdOfUser(

	userId string,

) (*RichMenuIdResponse, error) {
	path := "/v2/bot/user/{userId}/richmenu"

	path = strings.Replace(path, "{userId}", userId, -1)

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := RichMenuIdResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// GetRichMenuList
//
// Get rich menu list
// Parameters:

// https://developers.line.biz/en/reference/messaging-api/#get-rich-menu-list
func (client *MessagingApiAPI) GetRichMenuList() (*RichMenuListResponse, error) {
	path := "/v2/bot/richmenu/list"

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := RichMenuListResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// GetRoomMemberCount
//
// Get number of users in a multi-person chat
// Parameters:
//        roomId             Room ID

// https://developers.line.biz/en/reference/messaging-api/#get-members-room-count
func (client *MessagingApiAPI) GetRoomMemberCount(

	roomId string,

) (*RoomMemberCountResponse, error) {
	path := "/v2/bot/room/{roomId}/members/count"

	path = strings.Replace(path, "{roomId}", roomId, -1)

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := RoomMemberCountResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// GetRoomMemberProfile
//
// Get multi-person chat member profile
// Parameters:
//        roomId             Room ID
//        userId             User ID

// https://developers.line.biz/en/reference/messaging-api/#get-room-member-profile
func (client *MessagingApiAPI) GetRoomMemberProfile(

	roomId string,

	userId string,

) (*RoomUserProfileResponse, error) {
	path := "/v2/bot/room/{roomId}/member/{userId}"

	path = strings.Replace(path, "{roomId}", roomId, -1)

	path = strings.Replace(path, "{userId}", userId, -1)

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := RoomUserProfileResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// GetRoomMembersIds
//
// Get multi-person chat member user IDs
// Parameters:
//        roomId             Room ID
//        start             Value of the continuation token found in the `next` property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group.

// https://developers.line.biz/en/reference/messaging-api/#get-room-member-user-ids
func (client *MessagingApiAPI) GetRoomMembersIds(

	roomId string,

	start string,

) (*MembersIdsResponse, error) {
	path := "/v2/bot/room/{roomId}/members/ids"

	path = strings.Replace(path, "{roomId}", roomId, -1)

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	var query url.Values
	query = url.Values{"start": []string{string(start)}}

	req.URL.RawQuery = query.Encode()

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := MembersIdsResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// GetWebhookEndpoint
//
// Get webhook endpoint information
// Parameters:

// https://developers.line.biz/en/reference/messaging-api/#get-webhook-endpoint-information
func (client *MessagingApiAPI) GetWebhookEndpoint() (*GetWebhookEndpointResponse, error) {
	path := "/v2/bot/channel/webhook/endpoint"

	log.Printf("Sending request: method=Get path=%s\n", path)
	req, err := http.NewRequest(http.MethodGet, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := GetWebhookEndpointResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// IssueLinkToken
//
// Issue link token
// Parameters:
//        userId             User ID for the LINE account to be linked. Found in the `source` object of account link event objects. Do not use the LINE ID used in LINE.

// https://developers.line.biz/en/reference/messaging-api/#issue-link-token
func (client *MessagingApiAPI) IssueLinkToken(

	userId string,

) (*IssueLinkTokenResponse, error) {
	path := "/v2/bot/user/{userId}/linkToken"

	path = strings.Replace(path, "{userId}", userId, -1)

	log.Printf("Sending request: method=Post path=%s\n", path)
	req, err := http.NewRequest(http.MethodPost, client.Url(path), nil)
	if err != nil {
		return nil, err
	}

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := IssueLinkTokenResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// LeaveGroup
//
// Leave group chat
// Parameters:
//        groupId             Group ID

// https://developers.line.biz/en/reference/messaging-api/#leave-group
func (client *MessagingApiAPI) LeaveGroup(

	groupId string,

) (struct{}, error) {
	path := "/v2/bot/group/{groupId}/leave"

	path = strings.Replace(path, "{groupId}", groupId, -1)

	log.Printf("Sending request: method=Post path=%s\n", path)
	req, err := http.NewRequest(http.MethodPost, client.Url(path), nil)
	if err != nil {
		return struct{}{}, err
	}

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return struct{}{}, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return struct{}{}, fmt.Errorf("failed to read response body: %w", err)
		}
		return struct{}{}, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	return struct{}{}, nil

}

// LeaveRoom
//
// Leave multi-person chat
// Parameters:
//        roomId             Room ID

// https://developers.line.biz/en/reference/messaging-api/#leave-room
func (client *MessagingApiAPI) LeaveRoom(

	roomId string,

) (struct{}, error) {
	path := "/v2/bot/room/{roomId}/leave"

	path = strings.Replace(path, "{roomId}", roomId, -1)

	log.Printf("Sending request: method=Post path=%s\n", path)
	req, err := http.NewRequest(http.MethodPost, client.Url(path), nil)
	if err != nil {
		return struct{}{}, err
	}

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return struct{}{}, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return struct{}{}, fmt.Errorf("failed to read response body: %w", err)
		}
		return struct{}{}, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	return struct{}{}, nil

}

// LinkRichMenuIdToUser
//
// Link rich menu to user.
// Parameters:
//        userId             User ID. Found in the `source` object of webhook event objects. Do not use the LINE ID used in LINE.
//        richMenuId             ID of a rich menu

// https://developers.line.biz/en/reference/messaging-api/#link-rich-menu-to-user
func (client *MessagingApiAPI) LinkRichMenuIdToUser(

	userId string,

	richMenuId string,

) (struct{}, error) {
	path := "/v2/bot/user/{userId}/richmenu/{richMenuId}"

	path = strings.Replace(path, "{userId}", userId, -1)

	path = strings.Replace(path, "{richMenuId}", richMenuId, -1)

	log.Printf("Sending request: method=Post path=%s\n", path)
	req, err := http.NewRequest(http.MethodPost, client.Url(path), nil)
	if err != nil {
		return struct{}{}, err
	}

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return struct{}{}, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return struct{}{}, fmt.Errorf("failed to read response body: %w", err)
		}
		return struct{}{}, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	return struct{}{}, nil

}

// LinkRichMenuIdToUsers
//
// Link rich menu to multiple users
// Parameters:
//        richMenuBulkLinkRequest

// https://developers.line.biz/en/reference/messaging-api/#link-rich-menu-to-users
func (client *MessagingApiAPI) LinkRichMenuIdToUsers(

	richMenuBulkLinkRequest *RichMenuBulkLinkRequest,

) (struct{}, error) {
	path := "/v2/bot/richmenu/bulk/link"

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	if err := enc.Encode(richMenuBulkLinkRequest); err != nil {
		return struct{}{}, err
	}
	log.Printf("Sending request: method=Post path=%s body=%s\n", path, buf.String())
	req, err := http.NewRequest(http.MethodPost, client.Url(path), &buf)
	if err != nil {
		return struct{}{}, err
	}
	req.Header.Set("Content-Type", "application/json; charset=UTF-8")

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return struct{}{}, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return struct{}{}, fmt.Errorf("failed to read response body: %w", err)
		}
		return struct{}{}, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	return struct{}{}, nil

}

// MarkMessagesAsRead
//
// Mark messages from users as read
// Parameters:
//        markMessagesAsReadRequest

// https://developers.line.biz/en/reference/partner-docs/#mark-messages-from-users-as-read
func (client *MessagingApiAPI) MarkMessagesAsRead(

	markMessagesAsReadRequest *MarkMessagesAsReadRequest,

) (struct{}, error) {
	path := "/v2/bot/message/markAsRead"

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	if err := enc.Encode(markMessagesAsReadRequest); err != nil {
		return struct{}{}, err
	}
	log.Printf("Sending request: method=Post path=%s body=%s\n", path, buf.String())
	req, err := http.NewRequest(http.MethodPost, client.Url(path), &buf)
	if err != nil {
		return struct{}{}, err
	}
	req.Header.Set("Content-Type", "application/json; charset=UTF-8")

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return struct{}{}, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return struct{}{}, fmt.Errorf("failed to read response body: %w", err)
		}
		return struct{}{}, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	return struct{}{}, nil

}

// Multicast
//
// An API that efficiently sends the same message to multiple user IDs. You can't send messages to group chats or multi-person chats.
// Parameters:
//        multicastRequest
//        xLineRetryKey             Retry key. Specifies the UUID in hexadecimal format (e.g., `123e4567-e89b-12d3-a456-426614174000`) generated by any method. The retry key isn't generated by LINE. Each developer must generate their own retry key.

// https://developers.line.biz/en/reference/messaging-api/#send-multicast-message
func (client *MessagingApiAPI) Multicast(

	multicastRequest *MulticastRequest,

	xLineRetryKey string,

) (*map[string]interface{}, error) {
	path := "/v2/bot/message/multicast"

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	if err := enc.Encode(multicastRequest); err != nil {
		return nil, err
	}
	log.Printf("Sending request: method=Post path=%s body=%s\n", path, buf.String())
	req, err := http.NewRequest(http.MethodPost, client.Url(path), &buf)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json; charset=UTF-8")

	req.Header.Set("X-Line-Retry-Key", string(xLineRetryKey))

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := map[string]interface{}{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// Narrowcast
//
// Send narrowcast message
// Parameters:
//        narrowcastRequest
//        xLineRetryKey             Retry key. Specifies the UUID in hexadecimal format (e.g., `123e4567-e89b-12d3-a456-426614174000`) generated by any method. The retry key isn't generated by LINE. Each developer must generate their own retry key.

// https://developers.line.biz/en/reference/messaging-api/#send-narrowcast-message
func (client *MessagingApiAPI) Narrowcast(

	narrowcastRequest *NarrowcastRequest,

	xLineRetryKey string,

) (*map[string]interface{}, error) {
	path := "/v2/bot/message/narrowcast"

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	if err := enc.Encode(narrowcastRequest); err != nil {
		return nil, err
	}
	log.Printf("Sending request: method=Post path=%s body=%s\n", path, buf.String())
	req, err := http.NewRequest(http.MethodPost, client.Url(path), &buf)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json; charset=UTF-8")

	req.Header.Set("X-Line-Retry-Key", string(xLineRetryKey))

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := map[string]interface{}{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// PushMessage
//
// Sends a message to a user, group chat, or multi-person chat at any time.
// Parameters:
//        pushMessageRequest
//        xLineRetryKey             Retry key. Specifies the UUID in hexadecimal format (e.g., `123e4567-e89b-12d3-a456-426614174000`) generated by any method. The retry key isn't generated by LINE. Each developer must generate their own retry key.

// https://developers.line.biz/en/reference/messaging-api/#send-push-message
func (client *MessagingApiAPI) PushMessage(

	pushMessageRequest *PushMessageRequest,

	xLineRetryKey string,

) (*PushMessageResponse, error) {
	path := "/v2/bot/message/push"

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	if err := enc.Encode(pushMessageRequest); err != nil {
		return nil, err
	}
	log.Printf("Sending request: method=Post path=%s body=%s\n", path, buf.String())
	req, err := http.NewRequest(http.MethodPost, client.Url(path), &buf)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json; charset=UTF-8")

	req.Header.Set("X-Line-Retry-Key", string(xLineRetryKey))

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := PushMessageResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// PushMessagesByPhone
//
// Send LINE notification message
// Parameters:
//        pnpMessagesRequest
//        xLineDeliveryTag             String returned in the delivery.data property of the delivery completion event via Webhook.

// https://developers.line.biz/en/reference/partner-docs/#send-line-notification-message
func (client *MessagingApiAPI) PushMessagesByPhone(

	pnpMessagesRequest *PnpMessagesRequest,

	xLineDeliveryTag string,

) (struct{}, error) {
	path := "/bot/pnp/push"

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	if err := enc.Encode(pnpMessagesRequest); err != nil {
		return struct{}{}, err
	}
	log.Printf("Sending request: method=Post path=%s body=%s\n", path, buf.String())
	req, err := http.NewRequest(http.MethodPost, client.Url(path), &buf)
	if err != nil {
		return struct{}{}, err
	}
	req.Header.Set("Content-Type", "application/json; charset=UTF-8")

	req.Header.Set("X-Line-Delivery-Tag", string(xLineDeliveryTag))

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return struct{}{}, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return struct{}{}, fmt.Errorf("failed to read response body: %w", err)
		}
		return struct{}{}, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	return struct{}{}, nil

}

// ReplyMessage
//
// Send reply message
// Parameters:
//        replyMessageRequest

// https://developers.line.biz/en/reference/messaging-api/#send-reply-message
func (client *MessagingApiAPI) ReplyMessage(

	replyMessageRequest *ReplyMessageRequest,

) (*ReplyMessageResponse, error) {
	path := "/v2/bot/message/reply"

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	if err := enc.Encode(replyMessageRequest); err != nil {
		return nil, err
	}
	log.Printf("Sending request: method=Post path=%s body=%s\n", path, buf.String())
	req, err := http.NewRequest(http.MethodPost, client.Url(path), &buf)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json; charset=UTF-8")

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := ReplyMessageResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// RichMenuBatch
//
// You can use this endpoint to batch control the rich menu linked to the users using the endpoint such as Link rich menu to user.  The following operations are available:  1. Replace a rich menu with another rich menu for all users linked to a specific rich menu 2. Unlink a rich menu for all users linked to a specific rich menu 3. Unlink a rich menu for all users linked the rich menu
// Parameters:
//        richMenuBatchRequest

// https://developers.line.biz/en/reference/messaging-api/#batch-control-rich-menus-of-users
func (client *MessagingApiAPI) RichMenuBatch(

	richMenuBatchRequest *RichMenuBatchRequest,

) (struct{}, error) {
	path := "/v2/bot/richmenu/batch"

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	if err := enc.Encode(richMenuBatchRequest); err != nil {
		return struct{}{}, err
	}
	log.Printf("Sending request: method=Post path=%s body=%s\n", path, buf.String())
	req, err := http.NewRequest(http.MethodPost, client.Url(path), &buf)
	if err != nil {
		return struct{}{}, err
	}
	req.Header.Set("Content-Type", "application/json; charset=UTF-8")

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return struct{}{}, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return struct{}{}, fmt.Errorf("failed to read response body: %w", err)
		}
		return struct{}{}, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	return struct{}{}, nil

}

// SetDefaultRichMenu
//
// Set default rich menu
// Parameters:
//        richMenuId             ID of a rich menu

// https://developers.line.biz/en/reference/messaging-api/#set-default-rich-menu
func (client *MessagingApiAPI) SetDefaultRichMenu(

	richMenuId string,

) (struct{}, error) {
	path := "/v2/bot/user/all/richmenu/{richMenuId}"

	path = strings.Replace(path, "{richMenuId}", richMenuId, -1)

	log.Printf("Sending request: method=Post path=%s\n", path)
	req, err := http.NewRequest(http.MethodPost, client.Url(path), nil)
	if err != nil {
		return struct{}{}, err
	}

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return struct{}{}, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return struct{}{}, fmt.Errorf("failed to read response body: %w", err)
		}
		return struct{}{}, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	return struct{}{}, nil

}

// SetWebhookEndpoint
//
// Set webhook endpoint URL
// Parameters:
//        setWebhookEndpointRequest

// https://developers.line.biz/en/reference/messaging-api/#set-webhook-endpoint-url
func (client *MessagingApiAPI) SetWebhookEndpoint(

	setWebhookEndpointRequest *SetWebhookEndpointRequest,

) (struct{}, error) {
	path := "/v2/bot/channel/webhook/endpoint"

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	if err := enc.Encode(setWebhookEndpointRequest); err != nil {
		return struct{}{}, err
	}
	log.Printf("Sending request: method=Put path=%s body=%s\n", path, buf.String())
	req, err := http.NewRequest(http.MethodPut, client.Url(path), &buf)
	if err != nil {
		return struct{}{}, err
	}
	req.Header.Set("Content-Type", "application/json; charset=UTF-8")

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return struct{}{}, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return struct{}{}, fmt.Errorf("failed to read response body: %w", err)
		}
		return struct{}{}, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	return struct{}{}, nil

}

// TestWebhookEndpoint
//
// Test webhook endpoint
// Parameters:
//        testWebhookEndpointRequest

// https://developers.line.biz/en/reference/messaging-api/#test-webhook-endpoint
func (client *MessagingApiAPI) TestWebhookEndpoint(

	testWebhookEndpointRequest *TestWebhookEndpointRequest,

) (*TestWebhookEndpointResponse, error) {
	path := "/v2/bot/channel/webhook/test"

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	if err := enc.Encode(testWebhookEndpointRequest); err != nil {
		return nil, err
	}
	log.Printf("Sending request: method=Post path=%s body=%s\n", path, buf.String())
	req, err := http.NewRequest(http.MethodPost, client.Url(path), &buf)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json; charset=UTF-8")

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return nil, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return nil, fmt.Errorf("failed to read response body: %w", err)
		}
		return nil, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	decoder := json.NewDecoder(res.Body)
	result := TestWebhookEndpointResponse{}
	if err := decoder.Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode JSON: %w", err)
	}
	return &result, nil

}

// UnlinkRichMenuIdFromUser
//
// Unlink rich menu from user
// Parameters:
//        userId             User ID. Found in the `source` object of webhook event objects. Do not use the LINE ID used in LINE.

// https://developers.line.biz/en/reference/messaging-api/#unlink-rich-menu-from-user
func (client *MessagingApiAPI) UnlinkRichMenuIdFromUser(

	userId string,

) (struct{}, error) {
	path := "/v2/bot/user/{userId}/richmenu"

	path = strings.Replace(path, "{userId}", userId, -1)

	log.Printf("Sending request: method=Delete path=%s\n", path)
	req, err := http.NewRequest(http.MethodDelete, client.Url(path), nil)
	if err != nil {
		return struct{}{}, err
	}

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return struct{}{}, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return struct{}{}, fmt.Errorf("failed to read response body: %w", err)
		}
		return struct{}{}, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	return struct{}{}, nil

}

// UnlinkRichMenuIdFromUsers
//
// Unlink rich menus from multiple users
// Parameters:
//        richMenuBulkUnlinkRequest

// https://developers.line.biz/en/reference/messaging-api/#unlink-rich-menu-from-users
func (client *MessagingApiAPI) UnlinkRichMenuIdFromUsers(

	richMenuBulkUnlinkRequest *RichMenuBulkUnlinkRequest,

) (struct{}, error) {
	path := "/v2/bot/richmenu/bulk/unlink"

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	if err := enc.Encode(richMenuBulkUnlinkRequest); err != nil {
		return struct{}{}, err
	}
	log.Printf("Sending request: method=Post path=%s body=%s\n", path, buf.String())
	req, err := http.NewRequest(http.MethodPost, client.Url(path), &buf)
	if err != nil {
		return struct{}{}, err
	}
	req.Header.Set("Content-Type", "application/json; charset=UTF-8")

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return struct{}{}, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return struct{}{}, fmt.Errorf("failed to read response body: %w", err)
		}
		return struct{}{}, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	return struct{}{}, nil

}

// UpdateRichMenuAlias
//
// Update rich menu alias
// Parameters:
//        richMenuAliasId             The rich menu alias ID you want to update.
//        updateRichMenuAliasRequest

// https://developers.line.biz/en/reference/messaging-api/#update-rich-menu-alias
func (client *MessagingApiAPI) UpdateRichMenuAlias(

	richMenuAliasId string,

	updateRichMenuAliasRequest *UpdateRichMenuAliasRequest,

) (struct{}, error) {
	path := "/v2/bot/richmenu/alias/{richMenuAliasId}"

	path = strings.Replace(path, "{richMenuAliasId}", richMenuAliasId, -1)

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	if err := enc.Encode(updateRichMenuAliasRequest); err != nil {
		return struct{}{}, err
	}
	log.Printf("Sending request: method=Post path=%s body=%s\n", path, buf.String())
	req, err := http.NewRequest(http.MethodPost, client.Url(path), &buf)
	if err != nil {
		return struct{}{}, err
	}
	req.Header.Set("Content-Type", "application/json; charset=UTF-8")

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return struct{}{}, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return struct{}{}, fmt.Errorf("failed to read response body: %w", err)
		}
		return struct{}{}, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	return struct{}{}, nil

}

// ValidateBroadcast
//
// Validate message objects of a broadcast message
// Parameters:
//        validateMessageRequest

// https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-broadcast-message
func (client *MessagingApiAPI) ValidateBroadcast(

	validateMessageRequest *ValidateMessageRequest,

) (struct{}, error) {
	path := "/v2/bot/message/validate/broadcast"

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	if err := enc.Encode(validateMessageRequest); err != nil {
		return struct{}{}, err
	}
	log.Printf("Sending request: method=Post path=%s body=%s\n", path, buf.String())
	req, err := http.NewRequest(http.MethodPost, client.Url(path), &buf)
	if err != nil {
		return struct{}{}, err
	}
	req.Header.Set("Content-Type", "application/json; charset=UTF-8")

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return struct{}{}, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return struct{}{}, fmt.Errorf("failed to read response body: %w", err)
		}
		return struct{}{}, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	return struct{}{}, nil

}

// ValidateMulticast
//
// Validate message objects of a multicast message
// Parameters:
//        validateMessageRequest

// https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-multicast-message
func (client *MessagingApiAPI) ValidateMulticast(

	validateMessageRequest *ValidateMessageRequest,

) (struct{}, error) {
	path := "/v2/bot/message/validate/multicast"

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	if err := enc.Encode(validateMessageRequest); err != nil {
		return struct{}{}, err
	}
	log.Printf("Sending request: method=Post path=%s body=%s\n", path, buf.String())
	req, err := http.NewRequest(http.MethodPost, client.Url(path), &buf)
	if err != nil {
		return struct{}{}, err
	}
	req.Header.Set("Content-Type", "application/json; charset=UTF-8")

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return struct{}{}, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return struct{}{}, fmt.Errorf("failed to read response body: %w", err)
		}
		return struct{}{}, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	return struct{}{}, nil

}

// ValidateNarrowcast
//
// Validate message objects of a narrowcast message
// Parameters:
//        validateMessageRequest

// https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-narrowcast-message
func (client *MessagingApiAPI) ValidateNarrowcast(

	validateMessageRequest *ValidateMessageRequest,

) (struct{}, error) {
	path := "/v2/bot/message/validate/narrowcast"

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	if err := enc.Encode(validateMessageRequest); err != nil {
		return struct{}{}, err
	}
	log.Printf("Sending request: method=Post path=%s body=%s\n", path, buf.String())
	req, err := http.NewRequest(http.MethodPost, client.Url(path), &buf)
	if err != nil {
		return struct{}{}, err
	}
	req.Header.Set("Content-Type", "application/json; charset=UTF-8")

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return struct{}{}, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return struct{}{}, fmt.Errorf("failed to read response body: %w", err)
		}
		return struct{}{}, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	return struct{}{}, nil

}

// ValidatePush
//
// Validate message objects of a push message
// Parameters:
//        validateMessageRequest

// https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-push-message
func (client *MessagingApiAPI) ValidatePush(

	validateMessageRequest *ValidateMessageRequest,

) (struct{}, error) {
	path := "/v2/bot/message/validate/push"

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	if err := enc.Encode(validateMessageRequest); err != nil {
		return struct{}{}, err
	}
	log.Printf("Sending request: method=Post path=%s body=%s\n", path, buf.String())
	req, err := http.NewRequest(http.MethodPost, client.Url(path), &buf)
	if err != nil {
		return struct{}{}, err
	}
	req.Header.Set("Content-Type", "application/json; charset=UTF-8")

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return struct{}{}, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return struct{}{}, fmt.Errorf("failed to read response body: %w", err)
		}
		return struct{}{}, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	return struct{}{}, nil

}

// ValidateReply
//
// Validate message objects of a reply message
// Parameters:
//        validateMessageRequest

// https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-reply-message
func (client *MessagingApiAPI) ValidateReply(

	validateMessageRequest *ValidateMessageRequest,

) (struct{}, error) {
	path := "/v2/bot/message/validate/reply"

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	if err := enc.Encode(validateMessageRequest); err != nil {
		return struct{}{}, err
	}
	log.Printf("Sending request: method=Post path=%s body=%s\n", path, buf.String())
	req, err := http.NewRequest(http.MethodPost, client.Url(path), &buf)
	if err != nil {
		return struct{}{}, err
	}
	req.Header.Set("Content-Type", "application/json; charset=UTF-8")

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return struct{}{}, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return struct{}{}, fmt.Errorf("failed to read response body: %w", err)
		}
		return struct{}{}, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	return struct{}{}, nil

}

// ValidateRichMenuBatchRequest
//
// Validate a request body of the Replace or unlink the linked rich menus in batches endpoint.
// Parameters:
//        richMenuBatchRequest

// https://developers.line.biz/en/reference/messaging-api/#validate-batch-control-rich-menus-request
func (client *MessagingApiAPI) ValidateRichMenuBatchRequest(

	richMenuBatchRequest *RichMenuBatchRequest,

) (struct{}, error) {
	path := "/v2/bot/richmenu/validate/batch"

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	if err := enc.Encode(richMenuBatchRequest); err != nil {
		return struct{}{}, err
	}
	log.Printf("Sending request: method=Post path=%s body=%s\n", path, buf.String())
	req, err := http.NewRequest(http.MethodPost, client.Url(path), &buf)
	if err != nil {
		return struct{}{}, err
	}
	req.Header.Set("Content-Type", "application/json; charset=UTF-8")

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return struct{}{}, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return struct{}{}, fmt.Errorf("failed to read response body: %w", err)
		}
		return struct{}{}, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	return struct{}{}, nil

}

// ValidateRichMenuObject
//
// Validate rich menu object
// Parameters:
//        richMenuRequest

// https://developers.line.biz/en/reference/messaging-api/#validate-rich-menu-object
func (client *MessagingApiAPI) ValidateRichMenuObject(

	richMenuRequest *RichMenuRequest,

) (struct{}, error) {
	path := "/v2/bot/richmenu/validate"

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	if err := enc.Encode(richMenuRequest); err != nil {
		return struct{}{}, err
	}
	log.Printf("Sending request: method=Post path=%s body=%s\n", path, buf.String())
	req, err := http.NewRequest(http.MethodPost, client.Url(path), &buf)
	if err != nil {
		return struct{}{}, err
	}
	req.Header.Set("Content-Type", "application/json; charset=UTF-8")

	res, err := client.Do(req)
	log.Printf("Got response from '%s %s': status=%d, contentLength=%d", req.Method, req.URL, res.StatusCode, res.ContentLength)

	if err != nil {
		return struct{}{}, err
	}

	if res.StatusCode/100 != 2 {
		body, err := io.ReadAll(res.Body)
		if err != nil {
			return struct{}{}, fmt.Errorf("failed to read response body: %w", err)
		}
		return struct{}{}, fmt.Errorf("unexpected status code: %d, %s", res.StatusCode, string(body))
	}

	defer res.Body.Close()

	return struct{}{}, nil

}
