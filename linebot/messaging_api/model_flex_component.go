/**
 * LINE Messaging API
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

//go:generate python3 ../../generate-code.py
package messaging_api

import (
	"encoding/json"
	"fmt"
)

type FlexComponentInterface interface {
	GetType() string
}

func (e FlexComponent) GetType() string {
	return e.Type
}

type UnknownFlexComponent struct {
	FlexComponentInterface
	Type string
	Raw  map[string]json.RawMessage
}

func (e UnknownFlexComponent) GetType() string {
	return e.Type
}

func setDiscriminatorPropertyFlexComponent(r FlexComponentInterface) FlexComponentInterface {
	switch v := r.(type) {
	case *FlexBox:
		if v.Type == "" {
			v.Type = "box"
		}
		return v
	case FlexBox:
		if v.Type == "" {
			v.Type = "box"
		}
		return v
	case *FlexButton:
		if v.Type == "" {
			v.Type = "button"
		}
		return v
	case FlexButton:
		if v.Type == "" {
			v.Type = "button"
		}
		return v
	case *FlexFiller:
		if v.Type == "" {
			v.Type = "filler"
		}
		return v
	case FlexFiller:
		if v.Type == "" {
			v.Type = "filler"
		}
		return v
	case *FlexIcon:
		if v.Type == "" {
			v.Type = "icon"
		}
		return v
	case FlexIcon:
		if v.Type == "" {
			v.Type = "icon"
		}
		return v
	case *FlexImage:
		if v.Type == "" {
			v.Type = "image"
		}
		return v
	case FlexImage:
		if v.Type == "" {
			v.Type = "image"
		}
		return v
	case *FlexSeparator:
		if v.Type == "" {
			v.Type = "separator"
		}
		return v
	case FlexSeparator:
		if v.Type == "" {
			v.Type = "separator"
		}
		return v
	case *FlexSpan:
		if v.Type == "" {
			v.Type = "span"
		}
		return v
	case FlexSpan:
		if v.Type == "" {
			v.Type = "span"
		}
		return v
	case *FlexText:
		if v.Type == "" {
			v.Type = "text"
		}
		return v
	case FlexText:
		if v.Type == "" {
			v.Type = "text"
		}
		return v
	case *FlexVideo:
		if v.Type == "" {
			v.Type = "video"
		}
		return v
	case FlexVideo:
		if v.Type == "" {
			v.Type = "video"
		}
		return v

	default:
		return v
	}
}

// FlexComponent

type FlexComponent struct {
	Type string `json:"type"`
}

func UnmarshalFlexComponent(data []byte) (FlexComponentInterface, error) {
	var raw map[string]json.RawMessage
	err := json.Unmarshal(data, &raw)
	if err != nil {
		return nil, fmt.Errorf("UnmarshalFlexComponent: %w", err)
	}

	var discriminator string
	err = json.Unmarshal(raw["type"], &discriminator)
	if err != nil {
		return nil, fmt.Errorf("UnmarshalFlexComponent: Cannot read type: %w", err)
	}

	switch discriminator {
	case "box":
		var box FlexBox
		if err := json.Unmarshal(data, &box); err != nil {
			return nil, fmt.Errorf("UnmarshalFlexComponent: Cannot read box: %w", err)
		}
		return box, nil
	case "button":
		var button FlexButton
		if err := json.Unmarshal(data, &button); err != nil {
			return nil, fmt.Errorf("UnmarshalFlexComponent: Cannot read button: %w", err)
		}
		return button, nil
	case "filler":
		var filler FlexFiller
		if err := json.Unmarshal(data, &filler); err != nil {
			return nil, fmt.Errorf("UnmarshalFlexComponent: Cannot read filler: %w", err)
		}
		return filler, nil
	case "icon":
		var icon FlexIcon
		if err := json.Unmarshal(data, &icon); err != nil {
			return nil, fmt.Errorf("UnmarshalFlexComponent: Cannot read icon: %w", err)
		}
		return icon, nil
	case "image":
		var image FlexImage
		if err := json.Unmarshal(data, &image); err != nil {
			return nil, fmt.Errorf("UnmarshalFlexComponent: Cannot read image: %w", err)
		}
		return image, nil
	case "separator":
		var separator FlexSeparator
		if err := json.Unmarshal(data, &separator); err != nil {
			return nil, fmt.Errorf("UnmarshalFlexComponent: Cannot read separator: %w", err)
		}
		return separator, nil
	case "span":
		var span FlexSpan
		if err := json.Unmarshal(data, &span); err != nil {
			return nil, fmt.Errorf("UnmarshalFlexComponent: Cannot read span: %w", err)
		}
		return span, nil
	case "text":
		var text FlexText
		if err := json.Unmarshal(data, &text); err != nil {
			return nil, fmt.Errorf("UnmarshalFlexComponent: Cannot read text: %w", err)
		}
		return text, nil
	case "video":
		var video FlexVideo
		if err := json.Unmarshal(data, &video); err != nil {
			return nil, fmt.Errorf("UnmarshalFlexComponent: Cannot read video: %w", err)
		}
		return video, nil

	default:
		var unknown UnknownFlexComponent
		unknown.Type = discriminator
		unknown.Raw = raw
		return unknown, nil
	}
}
