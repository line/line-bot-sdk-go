/**
 * LINE Messaging API
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

//go:generate python3 ../../generate-code.py
package messaging_api

import (
	"encoding/json"
	"fmt"
)

type RecipientInterface interface {
	GetType() string
}

func (e Recipient) GetType() string {
	return e.Type
}

type UnknownRecipient struct {
	RecipientInterface
	Type string
	Raw  map[string]json.RawMessage
}

func (e UnknownRecipient) GetType() string {
	return e.Type
}

func setDiscriminatorPropertyRecipient(r RecipientInterface) RecipientInterface {
	switch v := r.(type) {
	case *AudienceRecipient:
		if v.Type == "" {
			v.Type = "audience"
		}
		return v
	case AudienceRecipient:
		if v.Type == "" {
			v.Type = "audience"
		}
		return v
	case *OperatorRecipient:
		if v.Type == "" {
			v.Type = "operator"
		}
		return v
	case OperatorRecipient:
		if v.Type == "" {
			v.Type = "operator"
		}
		return v
	case *RedeliveryRecipient:
		if v.Type == "" {
			v.Type = "redelivery"
		}
		return v
	case RedeliveryRecipient:
		if v.Type == "" {
			v.Type = "redelivery"
		}
		return v

	default:
		return v
	}
}

// Recipient
// Recipient

type Recipient struct {
	// Type of recipient

	Type string `json:"type,omitempty"`
}

func UnmarshalRecipient(data []byte) (RecipientInterface, error) {
	var raw map[string]json.RawMessage
	err := json.Unmarshal(data, &raw)
	if err != nil {
		return nil, fmt.Errorf("UnmarshalRecipient: %w", err)
	}

	var discriminator string
	err = json.Unmarshal(raw["type"], &discriminator)
	if err != nil {
		return nil, fmt.Errorf("UnmarshalRecipient: Cannot read type: %w", err)
	}

	switch discriminator {
	case "audience":
		var audience AudienceRecipient
		if err := json.Unmarshal(data, &audience); err != nil {
			return nil, fmt.Errorf("UnmarshalRecipient: Cannot read audience: %w", err)
		}
		return audience, nil
	case "operator":
		var operator OperatorRecipient
		if err := json.Unmarshal(data, &operator); err != nil {
			return nil, fmt.Errorf("UnmarshalRecipient: Cannot read operator: %w", err)
		}
		return operator, nil
	case "redelivery":
		var redelivery RedeliveryRecipient
		if err := json.Unmarshal(data, &redelivery); err != nil {
			return nil, fmt.Errorf("UnmarshalRecipient: Cannot read redelivery: %w", err)
		}
		return redelivery, nil

	default:
		var unknown UnknownRecipient
		unknown.Type = discriminator
		unknown.Raw = raw
		return unknown, nil
	}
}
