/**
 * LINE Messaging API
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

//go:generate python3 ../../generate-code.py
package messaging_api

import (
	"encoding/json"
	"fmt"
)

type CouponRewardRequestInterface interface {
	GetType() string
}

func (e CouponRewardRequest) GetType() string {
	return e.Type
}

type UnknownCouponRewardRequest struct {
	CouponRewardRequestInterface
	Type string
	Raw  map[string]json.RawMessage
}

func (e UnknownCouponRewardRequest) GetType() string {
	return e.Type
}

func setDiscriminatorPropertyCouponRewardRequest(r CouponRewardRequestInterface) CouponRewardRequestInterface {
	switch v := r.(type) {
	case *CouponCashBackRewardRequest:
		if v.Type == "" {
			v.Type = "cashBack"
		}
		return v
	case CouponCashBackRewardRequest:
		if v.Type == "" {
			v.Type = "cashBack"
		}
		return v
	case *CouponDiscountRewardRequest:
		if v.Type == "" {
			v.Type = "discount"
		}
		return v
	case CouponDiscountRewardRequest:
		if v.Type == "" {
			v.Type = "discount"
		}
		return v
	case *CouponFreeRewardRequest:
		if v.Type == "" {
			v.Type = "free"
		}
		return v
	case CouponFreeRewardRequest:
		if v.Type == "" {
			v.Type = "free"
		}
		return v
	case *CouponGiftRewardRequest:
		if v.Type == "" {
			v.Type = "gift"
		}
		return v
	case CouponGiftRewardRequest:
		if v.Type == "" {
			v.Type = "gift"
		}
		return v
	case *CouponOthersRewardRequest:
		if v.Type == "" {
			v.Type = "others"
		}
		return v
	case CouponOthersRewardRequest:
		if v.Type == "" {
			v.Type = "others"
		}
		return v

	default:
		return v
	}
}

// CouponRewardRequest

type CouponRewardRequest struct {
	// Type of coupon. Determines the benefit provided.

	Type string `json:"type"`
}

func UnmarshalCouponRewardRequest(data []byte) (CouponRewardRequestInterface, error) {
	var raw map[string]json.RawMessage
	err := json.Unmarshal(data, &raw)
	if err != nil {
		return nil, fmt.Errorf("UnmarshalCouponRewardRequest: %w", err)
	}

	var discriminator string
	err = json.Unmarshal(raw["type"], &discriminator)
	if err != nil {
		return nil, fmt.Errorf("UnmarshalCouponRewardRequest: Cannot read type: %w", err)
	}

	switch discriminator {
	case "cashBack":
		var cashBack CouponCashBackRewardRequest
		if err := json.Unmarshal(data, &cashBack); err != nil {
			return nil, fmt.Errorf("UnmarshalCouponRewardRequest: Cannot read cashBack: %w", err)
		}
		return cashBack, nil
	case "discount":
		var discount CouponDiscountRewardRequest
		if err := json.Unmarshal(data, &discount); err != nil {
			return nil, fmt.Errorf("UnmarshalCouponRewardRequest: Cannot read discount: %w", err)
		}
		return discount, nil
	case "free":
		var free CouponFreeRewardRequest
		if err := json.Unmarshal(data, &free); err != nil {
			return nil, fmt.Errorf("UnmarshalCouponRewardRequest: Cannot read free: %w", err)
		}
		return free, nil
	case "gift":
		var gift CouponGiftRewardRequest
		if err := json.Unmarshal(data, &gift); err != nil {
			return nil, fmt.Errorf("UnmarshalCouponRewardRequest: Cannot read gift: %w", err)
		}
		return gift, nil
	case "others":
		var others CouponOthersRewardRequest
		if err := json.Unmarshal(data, &others); err != nil {
			return nil, fmt.Errorf("UnmarshalCouponRewardRequest: Cannot read others: %w", err)
		}
		return others, nil

	default:
		var unknown UnknownCouponRewardRequest
		unknown.Type = discriminator
		unknown.Raw = raw
		return unknown, nil
	}
}
