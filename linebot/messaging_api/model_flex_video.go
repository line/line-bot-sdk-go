/**
 * LINE Messaging API
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

//go:generate python3 ../../generate-code.py
package messaging_api

import (
	"encoding/json"
	"fmt"
)

// FlexVideo
// FlexVideo

type FlexVideo struct {
	FlexComponent

	/**
	 * Get Url
	 */
	Url string `json:"url"`

	/**
	 * Get PreviewUrl
	 */
	PreviewUrl string `json:"previewUrl"`

	/**
	 * Get AltContent
	 */
	AltContent FlexComponentInterface `json:"altContent"`

	/**
	 * Get AspectRatio
	 */
	AspectRatio string `json:"aspectRatio,omitempty"`

	/**
	 * Get Action
	 */
	Action ActionInterface `json:"action,omitempty"`
}

func (cr *FlexVideo) UnmarshalJSON(data []byte) error {
	var raw map[string]json.RawMessage
	err := json.Unmarshal(data, &raw)
	if err != nil {
		return fmt.Errorf("JSON parse error in map: %w", err)
	}

	if raw["type"] != nil {

		err = json.Unmarshal(raw["type"], &cr.Type)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(Type): %w", err)
		}

	}

	if raw["url"] != nil {

		err = json.Unmarshal(raw["url"], &cr.Url)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(Url): %w", err)
		}

	}

	if raw["previewUrl"] != nil {

		err = json.Unmarshal(raw["previewUrl"], &cr.PreviewUrl)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(PreviewUrl): %w", err)
		}

	}

	if raw["altContent"] != nil {

		if rawaltContent, ok := raw["altContent"]; ok && rawaltContent != nil {
			AltContent, err := UnmarshalFlexComponent(rawaltContent)
			if err != nil {
				return fmt.Errorf("JSON parse error in FlexComponent(discriminator): %w", err)
			}
			cr.AltContent = AltContent
		}

	}

	if raw["aspectRatio"] != nil {

		err = json.Unmarshal(raw["aspectRatio"], &cr.AspectRatio)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(AspectRatio): %w", err)
		}

	}

	if raw["action"] != nil {

		if rawaction, ok := raw["action"]; ok && rawaction != nil {
			Action, err := UnmarshalAction(rawaction)
			if err != nil {
				return fmt.Errorf("JSON parse error in Action(discriminator): %w", err)
			}
			cr.Action = Action
		}

	}

	return nil
}

// MarshalJSON customizes the JSON serialization of the FlexVideo struct.
func (r *FlexVideo) MarshalJSON() ([]byte, error) {

	r.AltContent = setDiscriminatorPropertyFlexComponent(r.AltContent)

	r.Action = setDiscriminatorPropertyAction(r.Action)

	type Alias FlexVideo
	return json.Marshal(&struct {
		*Alias

		Type string `json:"type"`
	}{
		Alias: (*Alias)(r),

		Type: "video",
	})
}
