/**
 * LINE Messaging API
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

//go:generate python3 ../../generate-code.py
package messaging_api

import (
	"encoding/json"
	"fmt"
)

type MentionTargetInterface interface {
	GetType() string
}

func (e MentionTarget) GetType() string {
	return e.Type
}

type UnknownMentionTarget struct {
	MentionTargetInterface
	Type string
	Raw  map[string]json.RawMessage
}

func (e UnknownMentionTarget) GetType() string {
	return e.Type
}

func setDiscriminatorPropertyMentionTarget(r MentionTargetInterface) MentionTargetInterface {
	switch v := r.(type) {
	case *AllMentionTarget:
		if v.Type == "" {
			v.Type = "all"
		}
		return v
	case AllMentionTarget:
		if v.Type == "" {
			v.Type = "all"
		}
		return v
	case *UserMentionTarget:
		if v.Type == "" {
			v.Type = "user"
		}
		return v
	case UserMentionTarget:
		if v.Type == "" {
			v.Type = "user"
		}
		return v

	default:
		return v
	}
}

// MentionTarget

type MentionTarget struct {
	// Target to be mentioned

	Type string `json:"type"`
}

func UnmarshalMentionTarget(data []byte) (MentionTargetInterface, error) {
	var raw map[string]json.RawMessage
	err := json.Unmarshal(data, &raw)
	if err != nil {
		return nil, fmt.Errorf("UnmarshalMentionTarget: %w", err)
	}

	var discriminator string
	err = json.Unmarshal(raw["type"], &discriminator)
	if err != nil {
		return nil, fmt.Errorf("UnmarshalMentionTarget: Cannot read type: %w", err)
	}

	switch discriminator {
	case "all":
		var all AllMentionTarget
		if err := json.Unmarshal(data, &all); err != nil {
			return nil, fmt.Errorf("UnmarshalMentionTarget: Cannot read all: %w", err)
		}
		return all, nil
	case "user":
		var user UserMentionTarget
		if err := json.Unmarshal(data, &user); err != nil {
			return nil, fmt.Errorf("UnmarshalMentionTarget: Cannot read user: %w", err)
		}
		return user, nil

	default:
		var unknown UnknownMentionTarget
		unknown.Type = discriminator
		unknown.Raw = raw
		return unknown, nil
	}
}
