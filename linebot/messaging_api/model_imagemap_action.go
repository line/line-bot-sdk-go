/**
 * LINE Messaging API
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

//go:generate python3 ../../generate-code.py
package messaging_api

import (
	"encoding/json"
	"fmt"
)

type ImagemapActionInterface interface {
	GetType() string
}

func (e ImagemapAction) GetType() string {
	return e.Type
}

type UnknownImagemapAction struct {
	ImagemapActionInterface
	Type string
	Raw  map[string]json.RawMessage
}

func (e UnknownImagemapAction) GetType() string {
	return e.Type
}

func setDiscriminatorPropertyImagemapAction(r ImagemapActionInterface) ImagemapActionInterface {
	switch v := r.(type) {
	case *ClipboardImagemapAction:
		if v.Type == "" {
			v.Type = "clipboard"
		}
		return v
	case ClipboardImagemapAction:
		if v.Type == "" {
			v.Type = "clipboard"
		}
		return v
	case *MessageImagemapAction:
		if v.Type == "" {
			v.Type = "message"
		}
		return v
	case MessageImagemapAction:
		if v.Type == "" {
			v.Type = "message"
		}
		return v
	case *UriImagemapAction:
		if v.Type == "" {
			v.Type = "uri"
		}
		return v
	case UriImagemapAction:
		if v.Type == "" {
			v.Type = "uri"
		}
		return v

	default:
		return v
	}
}

// ImagemapAction

// https://developers.line.biz/en/reference/messaging-api/#imagemap-action-objects

type ImagemapAction struct {
	Type string `json:"type"`

	Area ImagemapArea `json:"area"`
}

func UnmarshalImagemapAction(data []byte) (ImagemapActionInterface, error) {
	var raw map[string]json.RawMessage
	err := json.Unmarshal(data, &raw)
	if err != nil {
		return nil, fmt.Errorf("UnmarshalImagemapAction: %w", err)
	}

	var discriminator string
	err = json.Unmarshal(raw["type"], &discriminator)
	if err != nil {
		return nil, fmt.Errorf("UnmarshalImagemapAction: Cannot read type: %w", err)
	}

	switch discriminator {
	case "clipboard":
		var clipboard ClipboardImagemapAction
		if err := json.Unmarshal(data, &clipboard); err != nil {
			return nil, fmt.Errorf("UnmarshalImagemapAction: Cannot read clipboard: %w", err)
		}
		return clipboard, nil
	case "message":
		var message MessageImagemapAction
		if err := json.Unmarshal(data, &message); err != nil {
			return nil, fmt.Errorf("UnmarshalImagemapAction: Cannot read message: %w", err)
		}
		return message, nil
	case "uri":
		var uri UriImagemapAction
		if err := json.Unmarshal(data, &uri); err != nil {
			return nil, fmt.Errorf("UnmarshalImagemapAction: Cannot read uri: %w", err)
		}
		return uri, nil

	default:
		var unknown UnknownImagemapAction
		unknown.Type = discriminator
		unknown.Raw = raw
		return unknown, nil
	}
}
