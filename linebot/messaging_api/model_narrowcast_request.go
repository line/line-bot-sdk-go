/**
 * LINE Messaging API
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

//go:generate python3 ../../generate-code.py
package messaging_api

import (
	"encoding/json"
	"fmt"
)

// NarrowcastRequest
// NarrowcastRequest
// https://developers.line.biz/en/reference/messaging-api/#send-narrowcast-message
type NarrowcastRequest struct {

	/**
	 * List of Message objects. (Required)
	 */
	Messages []MessageInterface `json:"messages"`

	/**
	 * Get Recipient
	 */
	Recipient RecipientInterface `json:"recipient,omitempty"`

	/**
	 * Get Filter
	 */
	Filter *Filter `json:"filter,omitempty"`

	/**
	 * Get Limit
	 */
	Limit *Limit `json:"limit,omitempty"`

	/**
	 * `true`: The user doesnâ€™t receive a push notification when a message is sent. `false`: The user receives a push notification when the message is sent (unless they have disabled push notifications in LINE and/or their device). The default value is false.
	 */
	NotificationDisabled bool `json:"notificationDisabled"`
}

func (cr *NarrowcastRequest) UnmarshalJSON(data []byte) error {
	var raw map[string]json.RawMessage
	err := json.Unmarshal(data, &raw)
	if err != nil {
		return fmt.Errorf("JSON parse error in map: %w", err)
	}

	if raw["messages"] != nil {

		var rawmessages []json.RawMessage
		err = json.Unmarshal(raw["messages"], &rawmessages)
		if err != nil {
			return fmt.Errorf("JSON parse error in messages(array): %w", err)
		}

		for _, data := range rawmessages {
			e, err := UnmarshalMessage(data)
			if err != nil {
				return fmt.Errorf("JSON parse error in Message(discriminator array): %w", err)
			}
			cr.Messages = append(cr.Messages, e)
		}

	}

	if raw["recipient"] != nil {

		if rawrecipient, ok := raw["recipient"]; ok && rawrecipient != nil {
			Recipient, err := UnmarshalRecipient(rawrecipient)
			if err != nil {
				return fmt.Errorf("JSON parse error in Recipient(discriminator): %w", err)
			}
			cr.Recipient = Recipient
		}

	}

	if raw["filter"] != nil {

		err = json.Unmarshal(raw["filter"], &cr.Filter)
		if err != nil {
			return fmt.Errorf("JSON parse error in Filter(Filter): %w", err)
		}

	}

	if raw["limit"] != nil {

		err = json.Unmarshal(raw["limit"], &cr.Limit)
		if err != nil {
			return fmt.Errorf("JSON parse error in Limit(Limit): %w", err)
		}

	}

	if raw["notificationDisabled"] != nil {

		err = json.Unmarshal(raw["notificationDisabled"], &cr.NotificationDisabled)
		if err != nil {
			return fmt.Errorf("JSON parse error in bool(NotificationDisabled): %w", err)
		}

	}

	return nil
}

// MarshalJSON customizes the JSON serialization of the NarrowcastRequest struct.
func (r *NarrowcastRequest) MarshalJSON() ([]byte, error) {

	newMessages := make([]MessageInterface, len(r.Messages))
	for i, v := range r.Messages {
		newMessages[i] = setDiscriminatorPropertyMessage(v)
	}

	r.Recipient = setDiscriminatorPropertyRecipient(r.Recipient)

	type Alias NarrowcastRequest
	return json.Marshal(&struct {
		*Alias

		Messages []MessageInterface `json:"messages"`
	}{
		Alias: (*Alias)(r),

		Messages: newMessages,
	})
}
