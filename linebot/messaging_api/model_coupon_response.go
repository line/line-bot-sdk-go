/**
 * LINE Messaging API
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

//go:generate python3 ../../generate-code.py
package messaging_api

import (
	"encoding/json"
	"fmt"
)

// CouponResponse
// Detailed information about a coupon, including all properties and current status.

type CouponResponse struct {

	/**
	 * Get AcquisitionCondition
	 */
	AcquisitionCondition AcquisitionConditionResponseInterface `json:"acquisitionCondition,omitempty"`

	/**
	 * URL of the barcode image associated with the coupon. Used for in-store redemption.
	 */
	BarcodeImageUrl string `json:"barcodeImageUrl,omitempty"`

	/**
	 * Unique code to be presented by the user to redeem the coupon.
	 */
	CouponCode string `json:"couponCode,omitempty"`

	/**
	 * Detailed description of the coupon. Displayed to users.
	 */
	Description string `json:"description,omitempty"`

	/**
	 * Coupon expiration time (epoch seconds). Coupon cannot be used after this time.
	 */
	EndTimestamp int64 `json:"endTimestamp"`

	/**
	 * URL of the main image representing the coupon. Displayed in the coupon list.
	 */
	ImageUrl string `json:"imageUrl,omitempty"`

	/**
	 * Maximum number of coupons that can be issued in total.
	 */
	MaxAcquireCount int64 `json:"maxAcquireCount"`

	/**
	 * Maximum number of times a single coupon ticket can be used.
	 */
	MaxUseCountPerTicket int32 `json:"maxUseCountPerTicket"`

	/**
	 * Maximum number of coupon tickets a single user can acquire.
	 */
	MaxTicketPerUser int64 `json:"maxTicketPerUser"`

	/**
	 * Coupon start time (epoch seconds). Coupon can be used from this time.
	 */
	StartTimestamp int64 `json:"startTimestamp"`

	/**
	 * Title of the coupon. Displayed in the coupon list.
	 */
	Title string `json:"title,omitempty"`

	/**
	 * Conditions for using the coupon. Shown to users.
	 */
	UsageCondition string `json:"usageCondition,omitempty"`

	/**
	 * Get Reward
	 */
	Reward CouponRewardResponseInterface `json:"reward,omitempty"`

	/**
	 * Visibility of the coupon. Determines who can see or acquire the coupon.
	 */
	Visibility CouponResponseVISIBILITY `json:"visibility,omitempty"`

	/**
	 * Timezone for interpreting start and end timestamps.
	 */
	Timezone CouponResponseTIMEZONE `json:"timezone,omitempty"`

	/**
	 * Unique identifier of the coupon.
	 */
	CouponId string `json:"couponId,omitempty"`

	/**
	 * Created timestamp (seconds) of the coupon.
	 */
	CreatedTimestamp int64 `json:"createdTimestamp"`

	/**
	 * Current status of the coupon.
	 */
	Status CouponResponseSTATUS `json:"status,omitempty"`
}

func (cr *CouponResponse) UnmarshalJSON(data []byte) error {
	var raw map[string]json.RawMessage
	err := json.Unmarshal(data, &raw)
	if err != nil {
		return fmt.Errorf("JSON parse error in map: %w", err)
	}

	if raw["acquisitionCondition"] != nil {

		if rawacquisitionCondition, ok := raw["acquisitionCondition"]; ok && rawacquisitionCondition != nil {
			AcquisitionCondition, err := UnmarshalAcquisitionConditionResponse(rawacquisitionCondition)
			if err != nil {
				return fmt.Errorf("JSON parse error in AcquisitionConditionResponse(discriminator): %w", err)
			}
			cr.AcquisitionCondition = AcquisitionCondition
		}

	}

	if raw["barcodeImageUrl"] != nil {

		err = json.Unmarshal(raw["barcodeImageUrl"], &cr.BarcodeImageUrl)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(BarcodeImageUrl): %w", err)
		}

	}

	if raw["couponCode"] != nil {

		err = json.Unmarshal(raw["couponCode"], &cr.CouponCode)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(CouponCode): %w", err)
		}

	}

	if raw["description"] != nil {

		err = json.Unmarshal(raw["description"], &cr.Description)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(Description): %w", err)
		}

	}

	if raw["endTimestamp"] != nil {

		err = json.Unmarshal(raw["endTimestamp"], &cr.EndTimestamp)
		if err != nil {
			return fmt.Errorf("JSON parse error in int64(EndTimestamp): %w", err)
		}

	}

	if raw["imageUrl"] != nil {

		err = json.Unmarshal(raw["imageUrl"], &cr.ImageUrl)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(ImageUrl): %w", err)
		}

	}

	if raw["maxAcquireCount"] != nil {

		err = json.Unmarshal(raw["maxAcquireCount"], &cr.MaxAcquireCount)
		if err != nil {
			return fmt.Errorf("JSON parse error in int64(MaxAcquireCount): %w", err)
		}

	}

	if raw["maxUseCountPerTicket"] != nil {

		err = json.Unmarshal(raw["maxUseCountPerTicket"], &cr.MaxUseCountPerTicket)
		if err != nil {
			return fmt.Errorf("JSON parse error in int32(MaxUseCountPerTicket): %w", err)
		}

	}

	if raw["maxTicketPerUser"] != nil {

		err = json.Unmarshal(raw["maxTicketPerUser"], &cr.MaxTicketPerUser)
		if err != nil {
			return fmt.Errorf("JSON parse error in int64(MaxTicketPerUser): %w", err)
		}

	}

	if raw["startTimestamp"] != nil {

		err = json.Unmarshal(raw["startTimestamp"], &cr.StartTimestamp)
		if err != nil {
			return fmt.Errorf("JSON parse error in int64(StartTimestamp): %w", err)
		}

	}

	if raw["title"] != nil {

		err = json.Unmarshal(raw["title"], &cr.Title)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(Title): %w", err)
		}

	}

	if raw["usageCondition"] != nil {

		err = json.Unmarshal(raw["usageCondition"], &cr.UsageCondition)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(UsageCondition): %w", err)
		}

	}

	if raw["reward"] != nil {

		if rawreward, ok := raw["reward"]; ok && rawreward != nil {
			Reward, err := UnmarshalCouponRewardResponse(rawreward)
			if err != nil {
				return fmt.Errorf("JSON parse error in CouponRewardResponse(discriminator): %w", err)
			}
			cr.Reward = Reward
		}

	}

	if raw["visibility"] != nil {

		err = json.Unmarshal(raw["visibility"], &cr.Visibility)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(Visibility): %w", err)
		}

	}

	if raw["timezone"] != nil {

		err = json.Unmarshal(raw["timezone"], &cr.Timezone)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(Timezone): %w", err)
		}

	}

	if raw["couponId"] != nil {

		err = json.Unmarshal(raw["couponId"], &cr.CouponId)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(CouponId): %w", err)
		}

	}

	if raw["createdTimestamp"] != nil {

		err = json.Unmarshal(raw["createdTimestamp"], &cr.CreatedTimestamp)
		if err != nil {
			return fmt.Errorf("JSON parse error in int64(CreatedTimestamp): %w", err)
		}

	}

	if raw["status"] != nil {

		err = json.Unmarshal(raw["status"], &cr.Status)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(Status): %w", err)
		}

	}

	return nil
}

// MarshalJSON customizes the JSON serialization of the CouponResponse struct.
func (r *CouponResponse) MarshalJSON() ([]byte, error) {

	r.AcquisitionCondition = setDiscriminatorPropertyAcquisitionConditionResponse(r.AcquisitionCondition)

	r.Reward = setDiscriminatorPropertyCouponRewardResponse(r.Reward)

	type Alias CouponResponse
	return json.Marshal(&struct {
		*Alias
	}{
		Alias: (*Alias)(r),
	})
}

// CouponResponseVISIBILITY type
/* Visibility of the coupon. Determines who can see or acquire the coupon. */
type CouponResponseVISIBILITY string

// CouponResponseVISIBILITY constants
const (
	CouponResponseVISIBILITY_UNLISTED CouponResponseVISIBILITY = "UNLISTED"

	CouponResponseVISIBILITY_PUBLIC CouponResponseVISIBILITY = "PUBLIC"

	CouponResponseVISIBILITY_PRIVATE CouponResponseVISIBILITY = "PRIVATE"
)

// CouponResponseTIMEZONE type
/* Timezone for interpreting start and end timestamps. */
type CouponResponseTIMEZONE string

// CouponResponseTIMEZONE constants
const (
	CouponResponseTIMEZONE_ETC_GMT_MINUS_12 CouponResponseTIMEZONE = "ETC_GMT_MINUS_12"

	CouponResponseTIMEZONE_ETC_GMT_MINUS_11 CouponResponseTIMEZONE = "ETC_GMT_MINUS_11"

	CouponResponseTIMEZONE_PACIFIC_HONOLULU CouponResponseTIMEZONE = "PACIFIC_HONOLULU"

	CouponResponseTIMEZONE_AMERICA_ANCHORAGE CouponResponseTIMEZONE = "AMERICA_ANCHORAGE"

	CouponResponseTIMEZONE_AMERICA_LOS_ANGELES CouponResponseTIMEZONE = "AMERICA_LOS_ANGELES"

	CouponResponseTIMEZONE_AMERICA_PHOENIX CouponResponseTIMEZONE = "AMERICA_PHOENIX"

	CouponResponseTIMEZONE_AMERICA_CHICAGO CouponResponseTIMEZONE = "AMERICA_CHICAGO"

	CouponResponseTIMEZONE_AMERICA_NEW_YORK CouponResponseTIMEZONE = "AMERICA_NEW_YORK"

	CouponResponseTIMEZONE_AMERICA_CARACAS CouponResponseTIMEZONE = "AMERICA_CARACAS"

	CouponResponseTIMEZONE_AMERICA_SANTIAGO CouponResponseTIMEZONE = "AMERICA_SANTIAGO"

	CouponResponseTIMEZONE_AMERICA_ST_JOHNS CouponResponseTIMEZONE = "AMERICA_ST_JOHNS"

	CouponResponseTIMEZONE_AMERICA_SAO_PAULO CouponResponseTIMEZONE = "AMERICA_SAO_PAULO"

	CouponResponseTIMEZONE_ETC_GMT_MINUS_2 CouponResponseTIMEZONE = "ETC_GMT_MINUS_2"

	CouponResponseTIMEZONE_ATLANTIC_CAPE_VERDE CouponResponseTIMEZONE = "ATLANTIC_CAPE_VERDE"

	CouponResponseTIMEZONE_EUROPE_LONDON CouponResponseTIMEZONE = "EUROPE_LONDON"

	CouponResponseTIMEZONE_EUROPE_PARIS CouponResponseTIMEZONE = "EUROPE_PARIS"

	CouponResponseTIMEZONE_EUROPE_ISTANBUL CouponResponseTIMEZONE = "EUROPE_ISTANBUL"

	CouponResponseTIMEZONE_EUROPE_MOSCOW CouponResponseTIMEZONE = "EUROPE_MOSCOW"

	CouponResponseTIMEZONE_ASIA_TEHRAN CouponResponseTIMEZONE = "ASIA_TEHRAN"

	CouponResponseTIMEZONE_ASIA_TBILISI CouponResponseTIMEZONE = "ASIA_TBILISI"

	CouponResponseTIMEZONE_ASIA_KABUL CouponResponseTIMEZONE = "ASIA_KABUL"

	CouponResponseTIMEZONE_ASIA_TASHKENT CouponResponseTIMEZONE = "ASIA_TASHKENT"

	CouponResponseTIMEZONE_ASIA_COLOMBO CouponResponseTIMEZONE = "ASIA_COLOMBO"

	CouponResponseTIMEZONE_ASIA_KATHMANDU CouponResponseTIMEZONE = "ASIA_KATHMANDU"

	CouponResponseTIMEZONE_ASIA_ALMATY CouponResponseTIMEZONE = "ASIA_ALMATY"

	CouponResponseTIMEZONE_ASIA_RANGOON CouponResponseTIMEZONE = "ASIA_RANGOON"

	CouponResponseTIMEZONE_ASIA_BANGKOK CouponResponseTIMEZONE = "ASIA_BANGKOK"

	CouponResponseTIMEZONE_ASIA_TAIPEI CouponResponseTIMEZONE = "ASIA_TAIPEI"

	CouponResponseTIMEZONE_ASIA_TOKYO CouponResponseTIMEZONE = "ASIA_TOKYO"

	CouponResponseTIMEZONE_AUSTRALIA_DARWIN CouponResponseTIMEZONE = "AUSTRALIA_DARWIN"

	CouponResponseTIMEZONE_AUSTRALIA_SYDNEY CouponResponseTIMEZONE = "AUSTRALIA_SYDNEY"

	CouponResponseTIMEZONE_ASIA_VLADIVOSTOK CouponResponseTIMEZONE = "ASIA_VLADIVOSTOK"

	CouponResponseTIMEZONE_ETC_GMT_PLUS_12 CouponResponseTIMEZONE = "ETC_GMT_PLUS_12"

	CouponResponseTIMEZONE_PACIFIC_TONGATAPU CouponResponseTIMEZONE = "PACIFIC_TONGATAPU"
)

// CouponResponseSTATUS type
/* Current status of the coupon. */
type CouponResponseSTATUS string

// CouponResponseSTATUS constants
const (
	CouponResponseSTATUS_DRAFT CouponResponseSTATUS = "DRAFT"

	CouponResponseSTATUS_RUNNING CouponResponseSTATUS = "RUNNING"

	CouponResponseSTATUS_CLOSED CouponResponseSTATUS = "CLOSED"
)
