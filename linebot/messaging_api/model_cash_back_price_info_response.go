/**
 * LINE Messaging API
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

//go:generate python3 ../../generate-code.py
package messaging_api

import (
	"encoding/json"
	"fmt"
)

type CashBackPriceInfoResponseInterface interface {
	GetType() string
}

func (e CashBackPriceInfoResponse) GetType() string {
	return e.Type
}

type UnknownCashBackPriceInfoResponse struct {
	CashBackPriceInfoResponseInterface
	Type string
	Raw  map[string]json.RawMessage
}

func (e UnknownCashBackPriceInfoResponse) GetType() string {
	return e.Type
}

func setDiscriminatorPropertyCashBackPriceInfoResponse(r CashBackPriceInfoResponseInterface) CashBackPriceInfoResponseInterface {
	switch v := r.(type) {
	case *CashBackFixedPriceInfoResponse:
		if v.Type == "" {
			v.Type = "fixed"
		}
		return v
	case CashBackFixedPriceInfoResponse:
		if v.Type == "" {
			v.Type = "fixed"
		}
		return v
	case *CashBackPercentagePriceInfoResponse:
		if v.Type == "" {
			v.Type = "percentage"
		}
		return v
	case CashBackPercentagePriceInfoResponse:
		if v.Type == "" {
			v.Type = "percentage"
		}
		return v

	default:
		return v
	}
}

// CashBackPriceInfoResponse

type CashBackPriceInfoResponse struct {
	Type string `json:"type"`
}

func UnmarshalCashBackPriceInfoResponse(data []byte) (CashBackPriceInfoResponseInterface, error) {
	var raw map[string]json.RawMessage
	err := json.Unmarshal(data, &raw)
	if err != nil {
		return nil, fmt.Errorf("UnmarshalCashBackPriceInfoResponse: %w", err)
	}

	var discriminator string
	err = json.Unmarshal(raw["type"], &discriminator)
	if err != nil {
		return nil, fmt.Errorf("UnmarshalCashBackPriceInfoResponse: Cannot read type: %w", err)
	}

	switch discriminator {
	case "fixed":
		var fixed CashBackFixedPriceInfoResponse
		if err := json.Unmarshal(data, &fixed); err != nil {
			return nil, fmt.Errorf("UnmarshalCashBackPriceInfoResponse: Cannot read fixed: %w", err)
		}
		return fixed, nil
	case "percentage":
		var percentage CashBackPercentagePriceInfoResponse
		if err := json.Unmarshal(data, &percentage); err != nil {
			return nil, fmt.Errorf("UnmarshalCashBackPriceInfoResponse: Cannot read percentage: %w", err)
		}
		return percentage, nil

	default:
		var unknown UnknownCashBackPriceInfoResponse
		unknown.Type = discriminator
		unknown.Raw = raw
		return unknown, nil
	}
}
