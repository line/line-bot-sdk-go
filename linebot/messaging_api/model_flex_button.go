/**
 * LINE Messaging API
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

//go:generate python3 ../../generate-code.py
package messaging_api

import (
	"encoding/json"
	"fmt"
)

// FlexButton
// FlexButton

type FlexButton struct {
	FlexComponent

	/**
	 * Get Flex
	 */
	Flex int32 `json:"flex"`

	/**
	 * Get Color
	 */
	Color string `json:"color,omitempty"`

	/**
	 * Get Style
	 */
	Style FlexButtonSTYLE `json:"style,omitempty"`

	/**
	 * Get Action
	 */
	Action ActionInterface `json:"action"`

	/**
	 * Get Gravity
	 */
	Gravity FlexButtonGRAVITY `json:"gravity,omitempty"`

	/**
	 * Get Margin
	 */
	Margin string `json:"margin,omitempty"`

	/**
	 * Get Position
	 */
	Position FlexButtonPOSITION `json:"position,omitempty"`

	/**
	 * Get OffsetTop
	 */
	OffsetTop string `json:"offsetTop,omitempty"`

	/**
	 * Get OffsetBottom
	 */
	OffsetBottom string `json:"offsetBottom,omitempty"`

	/**
	 * Get OffsetStart
	 */
	OffsetStart string `json:"offsetStart,omitempty"`

	/**
	 * Get OffsetEnd
	 */
	OffsetEnd string `json:"offsetEnd,omitempty"`

	/**
	 * Get Height
	 */
	Height FlexButtonHEIGHT `json:"height,omitempty"`

	/**
	 * Get AdjustMode
	 */
	AdjustMode FlexButtonADJUST_MODE `json:"adjustMode,omitempty"`

	/**
	 * Get Scaling
	 */
	Scaling bool `json:"scaling"`
}

func (cr *FlexButton) UnmarshalJSON(data []byte) error {
	var raw map[string]json.RawMessage
	err := json.Unmarshal(data, &raw)
	if err != nil {
		return fmt.Errorf("JSON parse error in map: %w", err)
	}

	if raw["type"] != nil {

		err = json.Unmarshal(raw["type"], &cr.Type)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(Type): %w", err)
		}

	}

	if raw["flex"] != nil {

		err = json.Unmarshal(raw["flex"], &cr.Flex)
		if err != nil {
			return fmt.Errorf("JSON parse error in int32(Flex): %w", err)
		}

	}

	if raw["color"] != nil {

		err = json.Unmarshal(raw["color"], &cr.Color)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(Color): %w", err)
		}

	}

	if raw["style"] != nil {

		err = json.Unmarshal(raw["style"], &cr.Style)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(Style): %w", err)
		}

	}

	if raw["action"] != nil {

		if rawaction, ok := raw["action"]; ok && rawaction != nil {
			Action, err := UnmarshalAction(rawaction)
			if err != nil {
				return fmt.Errorf("JSON parse error in Action(discriminator): %w", err)
			}
			cr.Action = Action
		}

	}

	if raw["gravity"] != nil {

		err = json.Unmarshal(raw["gravity"], &cr.Gravity)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(Gravity): %w", err)
		}

	}

	if raw["margin"] != nil {

		err = json.Unmarshal(raw["margin"], &cr.Margin)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(Margin): %w", err)
		}

	}

	if raw["position"] != nil {

		err = json.Unmarshal(raw["position"], &cr.Position)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(Position): %w", err)
		}

	}

	if raw["offsetTop"] != nil {

		err = json.Unmarshal(raw["offsetTop"], &cr.OffsetTop)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(OffsetTop): %w", err)
		}

	}

	if raw["offsetBottom"] != nil {

		err = json.Unmarshal(raw["offsetBottom"], &cr.OffsetBottom)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(OffsetBottom): %w", err)
		}

	}

	if raw["offsetStart"] != nil {

		err = json.Unmarshal(raw["offsetStart"], &cr.OffsetStart)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(OffsetStart): %w", err)
		}

	}

	if raw["offsetEnd"] != nil {

		err = json.Unmarshal(raw["offsetEnd"], &cr.OffsetEnd)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(OffsetEnd): %w", err)
		}

	}

	if raw["height"] != nil {

		err = json.Unmarshal(raw["height"], &cr.Height)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(Height): %w", err)
		}

	}

	if raw["adjustMode"] != nil {

		err = json.Unmarshal(raw["adjustMode"], &cr.AdjustMode)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(AdjustMode): %w", err)
		}

	}

	if raw["scaling"] != nil {

		err = json.Unmarshal(raw["scaling"], &cr.Scaling)
		if err != nil {
			return fmt.Errorf("JSON parse error in bool(Scaling): %w", err)
		}

	}

	return nil
}

// MarshalJSON customizes the JSON serialization of the FlexButton struct.
func (r *FlexButton) MarshalJSON() ([]byte, error) {

	r.Action = setDiscriminatorPropertyAction(r.Action)

	type Alias FlexButton
	return json.Marshal(&struct {
		*Alias

		Type string `json:"type"`
	}{
		Alias: (*Alias)(r),

		Type: "button",
	})
}

// FlexButtonSTYLE type

type FlexButtonSTYLE string

// FlexButtonSTYLE constants
const (
	FlexButtonSTYLE_PRIMARY FlexButtonSTYLE = "primary"

	FlexButtonSTYLE_SECONDARY FlexButtonSTYLE = "secondary"

	FlexButtonSTYLE_LINK FlexButtonSTYLE = "link"
)

// FlexButtonGRAVITY type

type FlexButtonGRAVITY string

// FlexButtonGRAVITY constants
const (
	FlexButtonGRAVITY_TOP FlexButtonGRAVITY = "top"

	FlexButtonGRAVITY_BOTTOM FlexButtonGRAVITY = "bottom"

	FlexButtonGRAVITY_CENTER FlexButtonGRAVITY = "center"
)

// FlexButtonPOSITION type

type FlexButtonPOSITION string

// FlexButtonPOSITION constants
const (
	FlexButtonPOSITION_RELATIVE FlexButtonPOSITION = "relative"

	FlexButtonPOSITION_ABSOLUTE FlexButtonPOSITION = "absolute"
)

// FlexButtonHEIGHT type

type FlexButtonHEIGHT string

// FlexButtonHEIGHT constants
const (
	FlexButtonHEIGHT_MD FlexButtonHEIGHT = "md"

	FlexButtonHEIGHT_SM FlexButtonHEIGHT = "sm"
)

// FlexButtonADJUST_MODE type

type FlexButtonADJUST_MODE string

// FlexButtonADJUST_MODE constants
const (
	FlexButtonADJUST_MODE_SHRINK_TO_FIT FlexButtonADJUST_MODE = "shrink-to-fit"
)
