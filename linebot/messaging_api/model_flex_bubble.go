/**
 * LINE Messaging API
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

//go:generate python3 ../../generate-code.py
package messaging_api

import (
	"encoding/json"
	"fmt"
)

// FlexBubble
// FlexBubble

type FlexBubble struct {
	FlexContainer

	/**
	 * Get Direction
	 */
	Direction FlexBubbleDIRECTION `json:"direction,omitempty"`

	/**
	 * Get Styles
	 */
	Styles *FlexBubbleStyles `json:"styles,omitempty"`

	/**
	 * Get Header
	 */
	Header *FlexBox `json:"header,omitempty"`

	/**
	 * Get Hero
	 */
	Hero FlexComponentInterface `json:"hero,omitempty"`

	/**
	 * Get Body
	 */
	Body *FlexBox `json:"body,omitempty"`

	/**
	 * Get Footer
	 */
	Footer *FlexBox `json:"footer,omitempty"`

	/**
	 * Get Size
	 */
	Size FlexBubbleSIZE `json:"size,omitempty"`

	/**
	 * Get Action
	 */
	Action ActionInterface `json:"action,omitempty"`
}

func (cr *FlexBubble) UnmarshalJSON(data []byte) error {
	var raw map[string]json.RawMessage
	err := json.Unmarshal(data, &raw)
	if err != nil {
		return fmt.Errorf("JSON parse error in map: %w", err)
	}

	if raw["type"] != nil {

		err = json.Unmarshal(raw["type"], &cr.Type)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(Type): %w", err)
		}

	}

	if raw["direction"] != nil {

		err = json.Unmarshal(raw["direction"], &cr.Direction)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(Direction): %w", err)
		}

	}

	if raw["styles"] != nil {

		err = json.Unmarshal(raw["styles"], &cr.Styles)
		if err != nil {
			return fmt.Errorf("JSON parse error in FlexBubbleStyles(Styles): %w", err)
		}

	}

	if raw["header"] != nil {

		err = json.Unmarshal(raw["header"], &cr.Header)
		if err != nil {
			return fmt.Errorf("JSON parse error in FlexBox(Header): %w", err)
		}

	}

	if raw["hero"] != nil {

		if rawhero, ok := raw["hero"]; ok && rawhero != nil {
			Hero, err := UnmarshalFlexComponent(rawhero)
			if err != nil {
				return fmt.Errorf("JSON parse error in FlexComponent(discriminator): %w", err)
			}
			cr.Hero = Hero
		}

	}

	if raw["body"] != nil {

		err = json.Unmarshal(raw["body"], &cr.Body)
		if err != nil {
			return fmt.Errorf("JSON parse error in FlexBox(Body): %w", err)
		}

	}

	if raw["footer"] != nil {

		err = json.Unmarshal(raw["footer"], &cr.Footer)
		if err != nil {
			return fmt.Errorf("JSON parse error in FlexBox(Footer): %w", err)
		}

	}

	if raw["size"] != nil {

		err = json.Unmarshal(raw["size"], &cr.Size)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(Size): %w", err)
		}

	}

	if raw["action"] != nil {

		if rawaction, ok := raw["action"]; ok && rawaction != nil {
			Action, err := UnmarshalAction(rawaction)
			if err != nil {
				return fmt.Errorf("JSON parse error in Action(discriminator): %w", err)
			}
			cr.Action = Action
		}

	}

	return nil
}

// MarshalJSON customizes the JSON serialization of the FlexBubble struct.
func (r *FlexBubble) MarshalJSON() ([]byte, error) {

	r.Hero = setDiscriminatorPropertyFlexComponent(r.Hero)

	r.Action = setDiscriminatorPropertyAction(r.Action)

	type Alias FlexBubble
	return json.Marshal(&struct {
		*Alias

		Type string `json:"type"`
	}{
		Alias: (*Alias)(r),

		Type: "bubble",
	})
}

// FlexBubbleDIRECTION type

type FlexBubbleDIRECTION string

// FlexBubbleDIRECTION constants
const (
	FlexBubbleDIRECTION_LTR FlexBubbleDIRECTION = "ltr"

	FlexBubbleDIRECTION_RTL FlexBubbleDIRECTION = "rtl"
)

// FlexBubbleSIZE type

type FlexBubbleSIZE string

// FlexBubbleSIZE constants
const (
	FlexBubbleSIZE_NANO FlexBubbleSIZE = "nano"

	FlexBubbleSIZE_MICRO FlexBubbleSIZE = "micro"

	FlexBubbleSIZE_DECA FlexBubbleSIZE = "deca"

	FlexBubbleSIZE_HECTO FlexBubbleSIZE = "hecto"

	FlexBubbleSIZE_KILO FlexBubbleSIZE = "kilo"

	FlexBubbleSIZE_MEGA FlexBubbleSIZE = "mega"

	FlexBubbleSIZE_GIGA FlexBubbleSIZE = "giga"
)
