/**
 * LINE Messaging API
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

//go:generate python3 ../../generate-code.py
package messaging_api

import (
	"encoding/json"
	"fmt"
)

type MessageInterface interface {
	GetType() string
}

func (e Message) GetType() string {
	return e.Type
}

type UnknownMessage struct {
	MessageInterface
	Type string
	Raw  map[string]json.RawMessage
}

func (e UnknownMessage) GetType() string {
	return e.Type
}

func setDiscriminatorPropertyMessage(r MessageInterface) MessageInterface {
	switch v := r.(type) {
	case *AudioMessage:
		if v.Type == "" {
			v.Type = "audio"
		}
		return v
	case AudioMessage:
		if v.Type == "" {
			v.Type = "audio"
		}
		return v
	case *FlexMessage:
		if v.Type == "" {
			v.Type = "flex"
		}
		return v
	case FlexMessage:
		if v.Type == "" {
			v.Type = "flex"
		}
		return v
	case *ImageMessage:
		if v.Type == "" {
			v.Type = "image"
		}
		return v
	case ImageMessage:
		if v.Type == "" {
			v.Type = "image"
		}
		return v
	case *ImagemapMessage:
		if v.Type == "" {
			v.Type = "imagemap"
		}
		return v
	case ImagemapMessage:
		if v.Type == "" {
			v.Type = "imagemap"
		}
		return v
	case *LocationMessage:
		if v.Type == "" {
			v.Type = "location"
		}
		return v
	case LocationMessage:
		if v.Type == "" {
			v.Type = "location"
		}
		return v
	case *StickerMessage:
		if v.Type == "" {
			v.Type = "sticker"
		}
		return v
	case StickerMessage:
		if v.Type == "" {
			v.Type = "sticker"
		}
		return v
	case *TemplateMessage:
		if v.Type == "" {
			v.Type = "template"
		}
		return v
	case TemplateMessage:
		if v.Type == "" {
			v.Type = "template"
		}
		return v
	case *TextMessage:
		if v.Type == "" {
			v.Type = "text"
		}
		return v
	case TextMessage:
		if v.Type == "" {
			v.Type = "text"
		}
		return v
	case *TextMessageV2:
		if v.Type == "" {
			v.Type = "textV2"
		}
		return v
	case TextMessageV2:
		if v.Type == "" {
			v.Type = "textV2"
		}
		return v
	case *VideoMessage:
		if v.Type == "" {
			v.Type = "video"
		}
		return v
	case VideoMessage:
		if v.Type == "" {
			v.Type = "video"
		}
		return v

	default:
		return v
	}
}

// Message

// https://developers.line.biz/en/reference/messaging-api/#message-common-properties

type Message struct {
	// Type of message

	Type string `json:"type"`

	QuickReply QuickReply `json:"quickReply,omitempty"`

	Sender Sender `json:"sender,omitempty"`
}

func UnmarshalMessage(data []byte) (MessageInterface, error) {
	var raw map[string]json.RawMessage
	err := json.Unmarshal(data, &raw)
	if err != nil {
		return nil, fmt.Errorf("UnmarshalMessage: %w", err)
	}

	var discriminator string
	err = json.Unmarshal(raw["type"], &discriminator)
	if err != nil {
		return nil, fmt.Errorf("UnmarshalMessage: Cannot read type: %w", err)
	}

	switch discriminator {
	case "audio":
		var audio AudioMessage
		if err := json.Unmarshal(data, &audio); err != nil {
			return nil, fmt.Errorf("UnmarshalMessage: Cannot read audio: %w", err)
		}
		return audio, nil
	case "flex":
		var flex FlexMessage
		if err := json.Unmarshal(data, &flex); err != nil {
			return nil, fmt.Errorf("UnmarshalMessage: Cannot read flex: %w", err)
		}
		return flex, nil
	case "image":
		var image ImageMessage
		if err := json.Unmarshal(data, &image); err != nil {
			return nil, fmt.Errorf("UnmarshalMessage: Cannot read image: %w", err)
		}
		return image, nil
	case "imagemap":
		var imagemap ImagemapMessage
		if err := json.Unmarshal(data, &imagemap); err != nil {
			return nil, fmt.Errorf("UnmarshalMessage: Cannot read imagemap: %w", err)
		}
		return imagemap, nil
	case "location":
		var location LocationMessage
		if err := json.Unmarshal(data, &location); err != nil {
			return nil, fmt.Errorf("UnmarshalMessage: Cannot read location: %w", err)
		}
		return location, nil
	case "sticker":
		var sticker StickerMessage
		if err := json.Unmarshal(data, &sticker); err != nil {
			return nil, fmt.Errorf("UnmarshalMessage: Cannot read sticker: %w", err)
		}
		return sticker, nil
	case "template":
		var template TemplateMessage
		if err := json.Unmarshal(data, &template); err != nil {
			return nil, fmt.Errorf("UnmarshalMessage: Cannot read template: %w", err)
		}
		return template, nil
	case "text":
		var text TextMessage
		if err := json.Unmarshal(data, &text); err != nil {
			return nil, fmt.Errorf("UnmarshalMessage: Cannot read text: %w", err)
		}
		return text, nil
	case "textV2":
		var textV2 TextMessageV2
		if err := json.Unmarshal(data, &textV2); err != nil {
			return nil, fmt.Errorf("UnmarshalMessage: Cannot read textV2: %w", err)
		}
		return textV2, nil
	case "video":
		var video VideoMessage
		if err := json.Unmarshal(data, &video); err != nil {
			return nil, fmt.Errorf("UnmarshalMessage: Cannot read video: %w", err)
		}
		return video, nil

	default:
		var unknown UnknownMessage
		unknown.Type = discriminator
		unknown.Raw = raw
		return unknown, nil
	}
}
