/**
 * LINE Messaging API
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

//go:generate python3 ../../generate-code.py
package messaging_api

import (
	"encoding/json"
	"fmt"
)

type DemographicFilterInterface interface {
	GetType() string
}

func (e DemographicFilter) GetType() string {
	return e.Type
}

type UnknownDemographicFilter struct {
	DemographicFilterInterface
	Type string
	Raw  map[string]json.RawMessage
}

func (e UnknownDemographicFilter) GetType() string {
	return e.Type
}

func setDiscriminatorPropertyDemographicFilter(r DemographicFilterInterface) DemographicFilterInterface {
	switch v := r.(type) {
	case *AgeDemographicFilter:
		if v.Type == "" {
			v.Type = "age"
		}
		return v
	case AgeDemographicFilter:
		if v.Type == "" {
			v.Type = "age"
		}
		return v
	case *AppTypeDemographicFilter:
		if v.Type == "" {
			v.Type = "appType"
		}
		return v
	case AppTypeDemographicFilter:
		if v.Type == "" {
			v.Type = "appType"
		}
		return v
	case *AreaDemographicFilter:
		if v.Type == "" {
			v.Type = "area"
		}
		return v
	case AreaDemographicFilter:
		if v.Type == "" {
			v.Type = "area"
		}
		return v
	case *GenderDemographicFilter:
		if v.Type == "" {
			v.Type = "gender"
		}
		return v
	case GenderDemographicFilter:
		if v.Type == "" {
			v.Type = "gender"
		}
		return v
	case *OperatorDemographicFilter:
		if v.Type == "" {
			v.Type = "operator"
		}
		return v
	case OperatorDemographicFilter:
		if v.Type == "" {
			v.Type = "operator"
		}
		return v
	case *SubscriptionPeriodDemographicFilter:
		if v.Type == "" {
			v.Type = "subscriptionPeriod"
		}
		return v
	case SubscriptionPeriodDemographicFilter:
		if v.Type == "" {
			v.Type = "subscriptionPeriod"
		}
		return v

	default:
		return v
	}
}

// DemographicFilter
// Demographic filter

type DemographicFilter struct {
	// Type of demographic filter

	Type string `json:"type,omitempty"`
}

func UnmarshalDemographicFilter(data []byte) (DemographicFilterInterface, error) {
	var raw map[string]json.RawMessage
	err := json.Unmarshal(data, &raw)
	if err != nil {
		return nil, fmt.Errorf("UnmarshalDemographicFilter: %w", err)
	}

	var discriminator string
	err = json.Unmarshal(raw["type"], &discriminator)
	if err != nil {
		return nil, fmt.Errorf("UnmarshalDemographicFilter: Cannot read type: %w", err)
	}

	switch discriminator {
	case "age":
		var age AgeDemographicFilter
		if err := json.Unmarshal(data, &age); err != nil {
			return nil, fmt.Errorf("UnmarshalDemographicFilter: Cannot read age: %w", err)
		}
		return age, nil
	case "appType":
		var appType AppTypeDemographicFilter
		if err := json.Unmarshal(data, &appType); err != nil {
			return nil, fmt.Errorf("UnmarshalDemographicFilter: Cannot read appType: %w", err)
		}
		return appType, nil
	case "area":
		var area AreaDemographicFilter
		if err := json.Unmarshal(data, &area); err != nil {
			return nil, fmt.Errorf("UnmarshalDemographicFilter: Cannot read area: %w", err)
		}
		return area, nil
	case "gender":
		var gender GenderDemographicFilter
		if err := json.Unmarshal(data, &gender); err != nil {
			return nil, fmt.Errorf("UnmarshalDemographicFilter: Cannot read gender: %w", err)
		}
		return gender, nil
	case "operator":
		var operator OperatorDemographicFilter
		if err := json.Unmarshal(data, &operator); err != nil {
			return nil, fmt.Errorf("UnmarshalDemographicFilter: Cannot read operator: %w", err)
		}
		return operator, nil
	case "subscriptionPeriod":
		var subscriptionPeriod SubscriptionPeriodDemographicFilter
		if err := json.Unmarshal(data, &subscriptionPeriod); err != nil {
			return nil, fmt.Errorf("UnmarshalDemographicFilter: Cannot read subscriptionPeriod: %w", err)
		}
		return subscriptionPeriod, nil

	default:
		var unknown UnknownDemographicFilter
		unknown.Type = discriminator
		unknown.Raw = raw
		return unknown, nil
	}
}
