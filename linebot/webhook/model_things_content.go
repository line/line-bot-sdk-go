/**
 * Webhook Type Definition
 * Webhook event definition of the LINE Messaging API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

//go:generate python3 ../../generate-code.py
package webhook

import (
	"encoding/json"
	"fmt"
)

type ThingsContentInterface interface {
	GetType() string
}

func (e ThingsContent) GetType() string {
	return e.Type
}

type UnknownThingsContent struct {
	ThingsContentInterface
	Type string
	Raw  map[string]json.RawMessage
}

func (e UnknownThingsContent) GetType() string {
	return e.Type
}

func setDiscriminatorPropertyThingsContent(r ThingsContentInterface) ThingsContentInterface {
	switch v := r.(type) {
	case *LinkThingsContent:
		if v.Type == "" {
			v.Type = "link"
		}
		return v
	case LinkThingsContent:
		if v.Type == "" {
			v.Type = "link"
		}
		return v
	case *ScenarioResultThingsContent:
		if v.Type == "" {
			v.Type = "scenarioResult"
		}
		return v
	case ScenarioResultThingsContent:
		if v.Type == "" {
			v.Type = "scenarioResult"
		}
		return v
	case *UnlinkThingsContent:
		if v.Type == "" {
			v.Type = "unlink"
		}
		return v
	case UnlinkThingsContent:
		if v.Type == "" {
			v.Type = "unlink"
		}
		return v

	default:
		return v
	}
}

// ThingsContent

type ThingsContent struct {
	// Type

	Type string `json:"type"`
}

func UnmarshalThingsContent(data []byte) (ThingsContentInterface, error) {
	var raw map[string]json.RawMessage
	err := json.Unmarshal(data, &raw)
	if err != nil {
		return nil, fmt.Errorf("UnmarshalThingsContent: %w", err)
	}

	var discriminator string
	err = json.Unmarshal(raw["type"], &discriminator)
	if err != nil {
		return nil, fmt.Errorf("UnmarshalThingsContent: Cannot read type: %w", err)
	}

	switch discriminator {
	case "link":
		var link LinkThingsContent
		if err := json.Unmarshal(data, &link); err != nil {
			return nil, fmt.Errorf("UnmarshalThingsContent: Cannot read link: %w", err)
		}
		return link, nil
	case "scenarioResult":
		var scenarioResult ScenarioResultThingsContent
		if err := json.Unmarshal(data, &scenarioResult); err != nil {
			return nil, fmt.Errorf("UnmarshalThingsContent: Cannot read scenarioResult: %w", err)
		}
		return scenarioResult, nil
	case "unlink":
		var unlink UnlinkThingsContent
		if err := json.Unmarshal(data, &unlink); err != nil {
			return nil, fmt.Errorf("UnmarshalThingsContent: Cannot read unlink: %w", err)
		}
		return unlink, nil

	default:
		var unknown UnknownThingsContent
		unknown.Type = discriminator
		unknown.Raw = raw
		return unknown, nil
	}
}
