/**
 * Webhook Type Definition
 * Webhook event definition of the LINE Messaging API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

//go:generate python3 ../../generate-code.py
package webhook

import (
	"encoding/json"
	"fmt"
)

type MembershipContentInterface interface {
	GetType() string
}

func (e MembershipContent) GetType() string {
	return e.Type
}

type UnknownMembershipContent struct {
	MembershipContentInterface
	Type string
	Raw  map[string]json.RawMessage
}

func (e UnknownMembershipContent) GetType() string {
	return e.Type
}

func setDiscriminatorPropertyMembershipContent(r MembershipContentInterface) MembershipContentInterface {
	switch v := r.(type) {
	case *JoinedMembershipContent:
		if v.Type == "" {
			v.Type = "joined"
		}
		return v
	case JoinedMembershipContent:
		if v.Type == "" {
			v.Type = "joined"
		}
		return v
	case *LeftMembershipContent:
		if v.Type == "" {
			v.Type = "left"
		}
		return v
	case LeftMembershipContent:
		if v.Type == "" {
			v.Type = "left"
		}
		return v
	case *RenewedMembershipContent:
		if v.Type == "" {
			v.Type = "renewed"
		}
		return v
	case RenewedMembershipContent:
		if v.Type == "" {
			v.Type = "renewed"
		}
		return v

	default:
		return v
	}
}

// MembershipContent
// Content of the membership event.

type MembershipContent struct {
	// Type of membership event.

	Type string `json:"type"`
}

func UnmarshalMembershipContent(data []byte) (MembershipContentInterface, error) {
	var raw map[string]json.RawMessage
	err := json.Unmarshal(data, &raw)
	if err != nil {
		return nil, fmt.Errorf("UnmarshalMembershipContent: %w", err)
	}

	var discriminator string
	err = json.Unmarshal(raw["type"], &discriminator)
	if err != nil {
		return nil, fmt.Errorf("UnmarshalMembershipContent: Cannot read type: %w", err)
	}

	switch discriminator {
	case "joined":
		var joined JoinedMembershipContent
		if err := json.Unmarshal(data, &joined); err != nil {
			return nil, fmt.Errorf("UnmarshalMembershipContent: Cannot read joined: %w", err)
		}
		return joined, nil
	case "left":
		var left LeftMembershipContent
		if err := json.Unmarshal(data, &left); err != nil {
			return nil, fmt.Errorf("UnmarshalMembershipContent: Cannot read left: %w", err)
		}
		return left, nil
	case "renewed":
		var renewed RenewedMembershipContent
		if err := json.Unmarshal(data, &renewed); err != nil {
			return nil, fmt.Errorf("UnmarshalMembershipContent: Cannot read renewed: %w", err)
		}
		return renewed, nil

	default:
		var unknown UnknownMembershipContent
		unknown.Type = discriminator
		unknown.Raw = raw
		return unknown, nil
	}
}
