/**
 * Webhook Type Definition
 * Webhook event definition of the LINE Messaging API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

//go:generate python3 ../../generate-code.py
package webhook

import (
	"encoding/json"
	"fmt"
)

// MembershipEvent
// This event indicates that a user has subscribed (joined), unsubscribed (left), or renewed the bot&#39;s membership.

type MembershipEvent struct {
	Event

	/**
	 * Get Source
	 */
	Source SourceInterface `json:"source,omitempty"`

	/**
	 * Time of the event in milliseconds. (Required)
	 */
	Timestamp int64 `json:"timestamp"`

	/**
	 * Get Mode
	 */
	Mode EventMode `json:"mode"`

	/**
	 * Webhook Event ID. An ID that uniquely identifies a webhook event. This is a string in ULID format. (Required)
	 */
	WebhookEventId string `json:"webhookEventId"`

	/**
	 * Get DeliveryContext
	 */
	DeliveryContext *DeliveryContext `json:"deliveryContext"`

	/**
	 * Reply token used to send reply message to this event (Required)
	 */
	ReplyToken string `json:"replyToken"`

	/**
	 * Get Membership
	 */
	Membership MembershipContentInterface `json:"membership"`
}

func (cr *MembershipEvent) UnmarshalJSON(data []byte) error {
	var raw map[string]json.RawMessage
	err := json.Unmarshal(data, &raw)
	if err != nil {
		return fmt.Errorf("JSON parse error in map: %w", err)
	}

	if raw["type"] != nil {

		err = json.Unmarshal(raw["type"], &cr.Type)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(Type): %w", err)
		}

	}

	if raw["source"] != nil {

		if rawsource, ok := raw["source"]; ok && rawsource != nil {
			Source, err := UnmarshalSource(rawsource)
			if err != nil {
				return fmt.Errorf("JSON parse error in Source(discriminator): %w", err)
			}
			cr.Source = Source
		}

	}

	if raw["timestamp"] != nil {

		err = json.Unmarshal(raw["timestamp"], &cr.Timestamp)
		if err != nil {
			return fmt.Errorf("JSON parse error in int64(Timestamp): %w", err)
		}

	}

	if raw["mode"] != nil {

		err = json.Unmarshal(raw["mode"], &cr.Mode)
		if err != nil {
			return fmt.Errorf("JSON parse error in EventMode(Mode): %w", err)
		}

	}

	if raw["webhookEventId"] != nil {

		err = json.Unmarshal(raw["webhookEventId"], &cr.WebhookEventId)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(WebhookEventId): %w", err)
		}

	}

	if raw["deliveryContext"] != nil {

		err = json.Unmarshal(raw["deliveryContext"], &cr.DeliveryContext)
		if err != nil {
			return fmt.Errorf("JSON parse error in DeliveryContext(DeliveryContext): %w", err)
		}

	}

	if raw["replyToken"] != nil {

		err = json.Unmarshal(raw["replyToken"], &cr.ReplyToken)
		if err != nil {
			return fmt.Errorf("JSON parse error in string(ReplyToken): %w", err)
		}

	}

	if raw["membership"] != nil {

		if rawmembership, ok := raw["membership"]; ok && rawmembership != nil {
			Membership, err := UnmarshalMembershipContent(rawmembership)
			if err != nil {
				return fmt.Errorf("JSON parse error in MembershipContent(discriminator): %w", err)
			}
			cr.Membership = Membership
		}

	}

	return nil
}

// MarshalJSON customizes the JSON serialization of the MembershipEvent struct.
func (r *MembershipEvent) MarshalJSON() ([]byte, error) {

	r.Source = setDiscriminatorPropertySource(r.Source)

	r.Membership = setDiscriminatorPropertyMembershipContent(r.Membership)

	type Alias MembershipEvent
	return json.Marshal(&struct {
		*Alias

		Type string `json:"type"`
	}{
		Alias: (*Alias)(r),

		Type: "membership",
	})
}
